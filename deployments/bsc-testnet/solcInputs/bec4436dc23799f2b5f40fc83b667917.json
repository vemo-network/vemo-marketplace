{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/dare-protocol/interfaces/IDerivativeNFT2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IDerivativeNFT2 {\n    function getOriginalToken() external view returns (address, uint256);\n\n    function getTokenDetail(\n        uint256 tokenId\n    ) external view returns (address, address, uint256);\n\n    function getCurrentToken(address provider) external view returns (uint256);\n\n    function safeMint(\n        address to,\n        string memory uri,\n        address provider\n    ) external payable returns (uint256);\n\n    function safeMintAndSetInfo(\n        address to,\n        string memory uri,\n        address provider,\n        uint256 openTime,\n        uint256 closingTime,\n        uint96 feeNumerator\n    ) external payable returns (uint256);\n\n    function setRoyalties(uint256 tokenId, uint96 feeNumerator) external;\n\n    function setTime(\n        uint256 tokenId,\n        uint256 openTime,\n        uint256 closingTime\n    ) external;\n}\n"
    },
    "contracts/dare-protocol/interfaces/ITimeHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITimeHelper {\n    function getOpeningTime(uint256 tokenId) external view returns (uint256);\n\n    function getClosingTime(uint256 tokenId) external view returns (uint256);\n\n    function isOpen(uint256 tokenId) external view returns (bool);\n\n    function hasClosed(uint256 tokenId) external view returns (bool);\n}\n"
    },
    "contracts/dare-protocol/interfaces/ITokenCreator.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\ninterface ITokenCreator {\n    function getTokenCreator(uint256 tokenId) external view returns (address);\n}\n"
    },
    "contracts/executionStrategies/StrategyStandardSaleForFixedPriceDNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\nimport {ERC165Checker} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport {IDerivativeNFT2} from \"../dare-protocol/interfaces/IDerivativeNFT2.sol\";\nimport {ITokenCreator} from \"../dare-protocol/interfaces/ITokenCreator.sol\";\nimport {ITimeHelper} from \"../dare-protocol/interfaces/ITimeHelper.sol\";\n\n/**\n * @title StrategyStandardSaleForFixedPriceV1B\n * @notice Strategy that executes an order at a fixed price that\n * can be taken either by a bid or an ask.\n */\ncontract StrategyStandardSaleForFixedPriceDNFT is\n    Ownable,\n    ERC165,\n    IExecutionStrategy\n{\n    using ERC165Checker for address;\n\n    event UpdateValidTime(\n        address indexed collection,\n        uint256 indexed tokenId,\n        uint256 startTime,\n        uint256 endTime\n    );\n\n    // Event if the protocol fee changes\n    event NewProtocolFee(uint256 protocolFee);\n\n    struct SaleNFTCustomizeParams {\n        uint256 time;\n    }\n\n    // Protocol fee\n    uint256 internal _protocolFee = 150;\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(\n        OrderTypes.TakerOrder calldata takerAsk,\n        OrderTypes.MakerOrder calldata makerBid\n    ) external view override returns (bool, uint256, uint256) {\n        // DerivativeNFT only\n        if (\n            !makerBid.collection.supportsInterface(\n                type(IDerivativeNFT2).interfaceId\n            )\n        ) {\n            return (false, makerBid.tokenId, makerBid.amount);\n        }\n\n        // only owner of derivativeNFT can execute ask orders\n        address derivativeNFTOwner = ITokenCreator(makerBid.collection)\n            .getTokenCreator(makerBid.tokenId);\n        if (makerBid.signer != derivativeNFTOwner) {\n            return (false, makerBid.tokenId, makerBid.amount);\n        }\n\n        SaleNFTCustomizeParams memory params = abi.decode(\n            takerAsk.params,\n            (SaleNFTCustomizeParams)\n        );\n        if (\n            !_validateTime(makerBid.collection, takerAsk.tokenId, params.time)\n        ) {\n            return (false, makerBid.tokenId, makerBid.amount);\n        }\n\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.tokenId == takerAsk.tokenId) &&\n                (makerBid.startTime <= block.timestamp) &&\n                (makerBid.endTime >= block.timestamp)),\n            makerBid.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external view override returns (bool, uint256, uint256) {\n        if (\n            !makerAsk.collection.supportsInterface(\n                type(IDerivativeNFT2).interfaceId\n            )\n        ) {\n            return (false, makerAsk.tokenId, makerAsk.amount);\n        }\n\n        // only owner of derivativeNFT can execute ask orders\n        address derivativeNFTOwner = ITokenCreator(makerAsk.collection)\n            .getTokenCreator(makerAsk.tokenId);\n        if (makerAsk.signer != derivativeNFTOwner) {\n            return (false, makerAsk.tokenId, makerAsk.amount);\n        }\n\n        // valid extra time\n        SaleNFTCustomizeParams memory params = abi.decode(\n            makerAsk.params,\n            (SaleNFTCustomizeParams)\n        );\n\n        if (\n            !_validateTime(makerAsk.collection, makerAsk.tokenId, params.time)\n        ) {\n            return (false, makerAsk.tokenId, makerAsk.amount);\n        }\n\n        return (\n            ((makerAsk.price == takerBid.price) &&\n                (makerAsk.tokenId == takerBid.tokenId) &&\n                (makerAsk.startTime <= block.timestamp) &&\n                (makerAsk.endTime >= block.timestamp)),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n\n    function _validateTime(\n        address collection,\n        uint256 tokenId,\n        uint256 extraTime\n    ) internal view returns (bool) {\n        // added time\n        uint256 openingTime = ITimeHelper(collection).getOpeningTime(tokenId);\n        uint256 closingTime = ITimeHelper(collection).getClosingTime(tokenId);\n\n        // // not setup yet\n        // if (openingTime == 0) {\n        //     return false;\n        // }\n\n        if (closingTime - openingTime >= extraTime) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @notice Set new protocol fee for this strategy\n     * @param newProtocolFee protocol fee\n     */\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\n        require(newProtocolFee < _protocolFee, \"Owner: Protocol fee too high\");\n        _protocolFee = newProtocolFee;\n\n        emit NewProtocolFee(newProtocolFee);\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return _protocolFee;\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override returns (bool) {\n        return\n            ERC165.supportsInterface(interfaceId) ||\n            interfaceId == type(IDerivativeNFT2).interfaceId;\n    }\n}\n"
    },
    "contracts/executionStrategies/StrategyStandardSaleForFixedPriceV1B.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\n\nimport \"../dare-protocol/interfaces/IDerivativeNFT2.sol\";\nimport {ITokenCreator} from \"../dare-protocol/interfaces/ITokenCreator.sol\";\nimport {ITimeHelper} from \"../dare-protocol/interfaces/ITimeHelper.sol\";\n\n/**\n * @title StrategyStandardSaleForFixedPriceV1B\n * @notice Strategy that executes an order at a fixed price that\n * can be taken either by a bid or an ask.\n */\ncontract StrategyStandardSaleForFixedPriceV1B is Ownable, IExecutionStrategy {\n    // Event if the protocol fee changes\n    event NewProtocolFee(uint256 protocolFee);\n\n    // Protocol fee\n    uint256 internal _protocolFee = 150;\n\n    constructor() Ownable() {}\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(\n        OrderTypes.TakerOrder calldata takerAsk,\n        OrderTypes.MakerOrder calldata makerBid\n    ) external view override returns (bool, uint256, uint256) {\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.tokenId == takerAsk.tokenId) &&\n                (makerBid.startTime <= block.timestamp) &&\n                (makerBid.endTime >= block.timestamp)),\n            makerBid.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external view override returns (bool, uint256, uint256) {\n        return (\n            ((makerAsk.price == takerBid.price) &&\n                (makerAsk.tokenId == takerBid.tokenId) &&\n                (makerAsk.startTime <= block.timestamp) &&\n                (makerAsk.endTime >= block.timestamp)),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n\n    /**\n     * @notice Set new protocol fee for this strategy\n     * @param newProtocolFee protocol fee\n     */\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\n        require(newProtocolFee < _protocolFee, \"Owner: Protocol fee too high\");\n        _protocolFee = newProtocolFee;\n\n        emit NewProtocolFee(newProtocolFee);\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return _protocolFee;\n    }\n}\n"
    },
    "contracts/interfaces/IExecutionStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\ninterface IExecutionStrategy {\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        );\n\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        );\n\n    function viewProtocolFee() external view returns (uint256);\n}\n"
    },
    "contracts/libraries/OrderTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title OrderTypes\n * @notice This library contains order types for the DareMarket.\n */\nlibrary OrderTypes {\n    // keccak256(\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\")\n    bytes32 internal constant MAKER_ORDER_HASH =\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\n\n    struct MakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address signer; // signer of the maker order\n        address collection; // collection address\n        uint256 price; // price (used as )\n        uint256 tokenId; // id of the token\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\n        address currency; // currency (e.g., WETH)\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n        uint256 startTime; // startTime in timestamp\n        uint256 endTime; // endTime in timestamp\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\n        bytes params; // additional parameters\n        uint8 v; // v: parameter (27 or 28)\n        bytes32 r; // r: parameter\n        bytes32 s; // s: parameter\n    }\n\n    struct TakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address taker; // msg.sender\n        uint256 price; // final price for the purchase\n        uint256 tokenId;\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\n        bytes params; // other params (e.g., tokenId)\n    }\n\n    function hash(MakerOrder memory makerOrder)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    MAKER_ORDER_HASH,\n                    makerOrder.isOrderAsk,\n                    makerOrder.signer,\n                    makerOrder.collection,\n                    makerOrder.price,\n                    makerOrder.tokenId,\n                    makerOrder.amount,\n                    makerOrder.strategy,\n                    makerOrder.currency,\n                    makerOrder.nonce,\n                    makerOrder.startTime,\n                    makerOrder.endTime,\n                    makerOrder.minPercentageToAsk,\n                    keccak256(makerOrder.params)\n                )\n            );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}