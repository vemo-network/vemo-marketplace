{
  "address": "0x454FbDfB8053C7D744dbC4DAEe71810C56285dA4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "NewProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateValidTime",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerAsk",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerBid",
          "type": "tuple"
        }
      ],
      "name": "canExecuteTakerAsk",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerBid",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerAsk",
          "type": "tuple"
        }
      ],
      "name": "canExecuteTakerBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivativeNFTInterfaceId",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "setDerivativeNFTInterfaceId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf067db35b5ae5efe05e963c57924afc852e8cb4abab3e47a6d978e229f68216b",
  "receipt": {
    "to": null,
    "from": "0x19EcE7C90E631e9ece2494efaB9868C3047D6507",
    "contractAddress": "0x454FbDfB8053C7D744dbC4DAEe71810C56285dA4",
    "transactionIndex": 2,
    "gasUsed": "706772",
    "logsBloom": "0x
    "blockHash": "0xf09e057fb6707aa2bd4593137fe10895676ebae6af744d5699ea9152d445aa97",
    "transactionHash": "0xf067db35b5ae5efe05e963c57924afc852e8cb4abab3e47a6d978e229f68216b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 30680237,
        "transactionHash": "0xf067db35b5ae5efe05e963c57924afc852e8cb4abab3e47a6d978e229f68216b",
        "address": "0x454FbDfB8053C7D744dbC4DAEe71810C56285dA4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000019ece7c90e631e9ece2494efab9868c3047d6507"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xf09e057fb6707aa2bd4593137fe10895676ebae6af744d5699ea9152d445aa97"
      }
    ],
    "blockNumber": 30680237,
    "cumulativeGasUsed": "1064442",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "c72002ff3a68ffab7092fc689a582fa4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"UpdateValidTime\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"canExecuteTakerAsk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"canExecuteTakerBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivativeNFTInterfaceId\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"setDerivativeNFTInterfaceId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerBid\":\"maker bid order\",\"takerAsk\":\"taker ask order\"},\"returns\":{\"_0\":\"(whether strategy can be executed, tokenId to execute, amount of tokens to execute)\"}},\"canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerAsk\":\"maker ask order\",\"takerBid\":\"taker bid order\"},\"returns\":{\"_0\":\"(whether strategy can be executed, tokenId to execute, amount of tokens to execute)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProtocolFee(uint256)\":{\"params\":{\"newProtocolFee\":\"protocol fee\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"viewProtocolFee()\":{\"returns\":{\"_0\":\"protocol fee\"}}},\"title\":\"StrategyStandardSaleForFixedPriceV1B\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check whether a taker ask order can be executed against a maker bid\"},\"canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check whether a taker bid order can be executed against a maker ask\"},\"setProtocolFee(uint256)\":{\"notice\":\"Set new protocol fee for this strategy\"},\"viewProtocolFee()\":{\"notice\":\"Return protocol fee for this strategy\"}},\"notice\":\"Strategy that executes an order at a fixed price that can be taken either by a bid or an ask.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/executionStrategies/StrategyStandardSaleForFixedPriceDNFT.sol\":\"StrategyStandardSaleForFixedPriceDNFT\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dare-protocol/interfaces/IDerivativeNFT2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDerivativeNFT2 {\\n    event NFT2DerivativeMinted(\\n        address indexed to,\\n        address indexed provider,\\n        address nft2Token,\\n        uint256 nft2TokenId,\\n        uint256 nft2DerivativeTokenId\\n    );\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getOriginalToken() external view returns (address, uint256);\\n\\n    function getTokenDetail(\\n        uint256 tokenId\\n    ) external view returns (address, address, uint256);\\n\\n    function getCurrentToken(address provider) external view returns (uint256);\\n\\n    function safeMint(\\n        address to,\\n        address provider\\n    ) external payable returns (uint256);\\n\\n    function safeMintAndSetInfo(\\n        address to,\\n        address provider,\\n        uint256 openTime,\\n        uint256 closingTime,\\n        uint96 feeNumerator\\n    ) external payable returns (uint256);\\n\\n    function setRoyalties(uint256 tokenId, uint96 feeNumerator) external;\\n\\n    function setTime(\\n        uint256 tokenId,\\n        uint256 openTime,\\n        uint256 closingTime\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xc08049f6701343d00e676c8e339f29dbf90f6c057fdb261dc31b11372dacd534\",\"license\":\"MIT\"},\"contracts/dare-protocol/interfaces/ITimeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITimeHelper {\\n    function getOpeningTime(uint256 tokenId) external view returns (uint256);\\n\\n    function getClosingTime(uint256 tokenId) external view returns (uint256);\\n\\n    function isOpen(uint256 tokenId) external view returns (bool);\\n\\n    function hasClosed(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb4643071e8dc28b1d1cdaaed2570a74ca22b3d6bbc8df047c2c49ffa3b3d4c5f\",\"license\":\"MIT\"},\"contracts/dare-protocol/interfaces/ITokenCreator.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\n\\ninterface ITokenCreator {\\n    function getTokenCreator(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3fe19a241389b6d78502c4cf612b4bda95d5d0bec1e1bf9ec7da258baf0837c3\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/executionStrategies/StrategyStandardSaleForFixedPriceDNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\nimport {IExecutionStrategy} from \\\"../interfaces/IExecutionStrategy.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IDerivativeNFT2} from \\\"../dare-protocol/interfaces/IDerivativeNFT2.sol\\\";\\nimport {ITokenCreator} from \\\"../dare-protocol/interfaces/ITokenCreator.sol\\\";\\nimport {ITimeHelper} from \\\"../dare-protocol/interfaces/ITimeHelper.sol\\\";\\n\\n/**\\n * @title StrategyStandardSaleForFixedPriceV1B\\n * @notice Strategy that executes an order at a fixed price that\\n * can be taken either by a bid or an ask.\\n */\\ncontract StrategyStandardSaleForFixedPriceDNFT is\\n    Ownable,\\n    ERC165,\\n    IExecutionStrategy\\n{\\n    using ERC165Checker for address;\\n\\n    event UpdateValidTime(\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 startTime,\\n        uint256 endTime\\n    );\\n\\n    // Event if the protocol fee changes\\n    event NewProtocolFee(uint256 protocolFee);\\n\\n    struct SaleNFTCustomizeParams {\\n        uint256 time;\\n    }\\n\\n    // Protocol fee\\n    uint256 internal _protocolFee = 150;\\n\\n    bytes4 public derivativeNFTInterfaceId;\\n\\n    constructor() Ownable() {\\n        // default interfaceId\\n        setDerivativeNFTInterfaceId(0x37db7649);\\n    }\\n\\n    function setDerivativeNFTInterfaceId(bytes4 interfaceId) public onlyOwner {\\n        derivativeNFTInterfaceId = interfaceId;\\n    }\\n\\n    /**\\n     * @notice Check whether a taker ask order can be executed against a maker bid\\n     * @param takerAsk taker ask order\\n     * @param makerBid maker bid order\\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\\n     */\\n    function canExecuteTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    ) external view override returns (bool, uint256, uint256) {\\n        // DerivativeNFT only\\n        if (\\n            !makerBid.collection.supportsInterface(\\n                derivativeNFTInterfaceId\\n            )\\n        ) {\\n            return (false, makerBid.tokenId, makerBid.amount);\\n        }\\n\\n        // only owner of derivativeNFT can execute ask orders\\n        address derivativeNFTOwner = ITokenCreator(makerBid.collection)\\n            .getTokenCreator(makerBid.tokenId);\\n        if (makerBid.signer != derivativeNFTOwner) {\\n            return (false, makerBid.tokenId, makerBid.amount);\\n        }\\n\\n        SaleNFTCustomizeParams memory params = abi.decode(\\n            takerAsk.params,\\n            (SaleNFTCustomizeParams)\\n        );\\n        if (\\n            !_validateTime(makerBid.collection, takerAsk.tokenId, params.time)\\n        ) {\\n            return (false, makerBid.tokenId, makerBid.amount);\\n        }\\n\\n        return (\\n            ((makerBid.price == takerAsk.price) &&\\n                (makerBid.tokenId == takerAsk.tokenId) &&\\n                (makerBid.startTime <= block.timestamp) &&\\n                (makerBid.endTime >= block.timestamp)),\\n            makerBid.tokenId,\\n            makerBid.amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Check whether a taker bid order can be executed against a maker ask\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\\n     */\\n    function canExecuteTakerBid(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external view override returns (bool, uint256, uint256) {\\n        if (\\n            !makerAsk.collection.supportsInterface(\\n                derivativeNFTInterfaceId\\n            )\\n        ) {\\n            return (false, makerAsk.tokenId, makerAsk.amount);\\n        }\\n\\n        // // only owner of derivativeNFT can execute ask orders\\n        // address derivativeNFTOwner = ITokenCreator(makerAsk.collection)\\n        //     .getTokenCreator(makerAsk.tokenId);\\n        // if (makerAsk.signer != derivativeNFTOwner) {\\n        //     return (false, makerAsk.tokenId, makerAsk.amount);\\n        // }\\n\\n        // valid extra time\\n        SaleNFTCustomizeParams memory params = abi.decode(\\n            makerAsk.params,\\n            (SaleNFTCustomizeParams)\\n        );\\n\\n        if (\\n            !_validateTime(makerAsk.collection, makerAsk.tokenId, params.time)\\n        ) {\\n            return (false, makerAsk.tokenId, makerAsk.amount);\\n        }\\n\\n        return (\\n            ((makerAsk.price == takerBid.price) &&\\n                (makerAsk.tokenId == takerBid.tokenId) &&\\n                (makerAsk.startTime <= block.timestamp) &&\\n                (makerAsk.endTime >= block.timestamp)),\\n            makerAsk.tokenId,\\n            makerAsk.amount\\n        );\\n    }\\n\\n    function _validateTime(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 extraTime\\n    ) internal view returns (bool) {\\n        // added time\\n        uint256 openingTime = ITimeHelper(collection).getOpeningTime(tokenId);\\n        uint256 closingTime = ITimeHelper(collection).getClosingTime(tokenId);\\n\\n        // // not setup yet\\n        // if (openingTime == 0) {\\n        //     return false;\\n        // }\\n\\n        if (closingTime - openingTime >= extraTime) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Set new protocol fee for this strategy\\n     * @param newProtocolFee protocol fee\\n     */\\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\\n        require(newProtocolFee < _protocolFee, \\\"Owner: Protocol fee too high\\\");\\n        _protocolFee = newProtocolFee;\\n\\n        emit NewProtocolFee(newProtocolFee);\\n    }\\n\\n    /**\\n     * @notice Return protocol fee for this strategy\\n     * @return protocol fee\\n     */\\n    function viewProtocolFee() external view override returns (uint256) {\\n        return _protocolFee;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override returns (bool) {\\n        return\\n            ERC165.supportsInterface(interfaceId) ||\\n            interfaceId == type(IExecutionStrategy).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x621b38f374a621d17c6649d1416ade4fd112e6ebc4e4dfb060c5d82ca9cae2e1\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IExecutionStrategy {\\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function viewProtocolFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73358a44547840affea91c5d25cda3eaa86bf4cf3865888b0684137caa74606d\",\"license\":\"MIT\"},\"contracts/libraries/OrderTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderTypes\\n * @notice This library contains order types for the DareMarket.\\n */\\nlibrary OrderTypes {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH =\\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n\\n    function hash(MakerOrder memory makerOrder)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe58bc034fa1e6b210060eac49ee3d250d6cbeabbb122c398404e4adf667dc631\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052609660015534801561001557600080fd5b5061001f33610034565b61002f6337db764960e01b610084565b610105565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61008c6100a5565b6002805463ffffffff191660e09290921c919091179055565b6000546001600160a01b031633146101035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b610a98806101146000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063865781ca11610066578063865781ca146101215780638da5cb5b146101515780639dd1cda61461016c578063ad2390ac1461017d578063f2fde38b1461019057600080fd5b806301ffc9a7146100a357806365f04bb3146100cb5780636964f21b146100f1578063715018a614610106578063787dce3d1461010e575b600080fd5b6100b66100b13660046108ba565b6101a3565b60405190151581526020015b60405180910390f35b6002546100d89060e01b81565b6040516001600160e01b031990911681526020016100c2565b6101046100ff3660046108ba565b6101da565b005b6101046101fb565b61010461011c3660046109a8565b61020f565b61013461012f366004610934565b6102a8565b6040805193151584526020840192909252908201526060016100c2565b6000546040516001600160a01b0390911681526020016100c2565b6001546040519081526020016100c2565b61013461018b366004610934565b6103a1565b61010461019e366004610880565b61055a565b60006301ffc9a760e01b6001600160e01b0319831614806101d457506001600160e01b031982166302da977360e61b145b92915050565b6101e26105d3565b6002805463ffffffff191660e09290921c919091179055565b6102036105d3565b61020d600061062d565b565b6102176105d3565b600154811061026d5760405162461bcd60e51b815260206004820152601c60248201527f4f776e65723a2050726f746f636f6c2066656520746f6f20686967680000000060448201526064015b60405180910390fd5b60018190556040518181527f3e1c6f794380f768303ee10adb978482d0ee037b0517bdabf3118141632078a69060200160405180910390a150565b600254600090819081906102d89060e01b6102c96060870160408801610880565b6001600160a01b03169061067d565b6102f157506000915050608082013560a083013561039a565b60006103016101808601866109da565b81019061030e91906108e4565b90506103306103236060870160408801610880565b82516080880135906106a0565b61034a5750600092505050608082013560a083013561039a565b85604001358560600135148015610368575085606001358560800135145b801561037957504285610120013511155b801561038a57504285610140013510155b9350505050608082013560a08301355b9250925092565b600254600090819081906103c29060e01b6102c96060870160408801610880565b6103db57506000915050608082013560a083013561039a565b60006103ed6060860160408701610880565b60405163934689a960e01b8152608087013560048201526001600160a01b03919091169063934689a99060240160206040518083038186803b15801561043257600080fd5b505afa158015610446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046a919061089d565b90506001600160a01b0381166104866040870160208801610880565b6001600160a01b0316146104aa5750600092505050608082013560a083013561039a565b60006104b960a08801886109da565b8101906104c691906108e4565b90506104e86104db6060880160408901610880565b825160608a0135906106a0565b610503575060009350505050608082013560a083013561039a565b86604001358660600135148015610521575086606001358660800135145b801561053257504286610120013511155b801561054357504286610140013510155b976080870135975060a09096013595945050505050565b6105626105d3565b6001600160a01b0381166105c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610264565b6105d08161062d565b50565b6000546001600160a01b0316331461020d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610264565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610688836107c4565b8015610699575061069983836107f7565b9392505050565b604051634ea3325560e01b81526004810183905260009081906001600160a01b03861690634ea332559060240160206040518083038186803b1580156106e557600080fd5b505afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d91906109c1565b60405163753199c360e11b8152600481018690529091506000906001600160a01b0387169063ea6333869060240160206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b91906109c1565b9050836107a88383610a28565b106107b857600192505050610699565b50600095945050505050565b60006107d7826301ffc9a760e01b6107f7565b80156101d457506107f0826001600160e01b03196107f7565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610869575060208210155b80156108755750600081115b979650505050505050565b60006020828403121561089257600080fd5b813561069981610a4d565b6000602082840312156108af57600080fd5b815161069981610a4d565b6000602082840312156108cc57600080fd5b81356001600160e01b03198116811461069957600080fd5b6000602082840312156108f657600080fd5b6040516020810181811067ffffffffffffffff8211171561092757634e487b7160e01b600052604160045260246000fd5b6040529135825250919050565b6000806040838503121561094757600080fd5b823567ffffffffffffffff8082111561095f57600080fd5b9084019060c0828703121561097357600080fd5b9092506020840135908082111561098957600080fd5b508301610200818603121561099d57600080fd5b809150509250929050565b6000602082840312156109ba57600080fd5b5035919050565b6000602082840312156109d357600080fd5b5051919050565b6000808335601e198436030181126109f157600080fd5b83018035915067ffffffffffffffff821115610a0c57600080fd5b602001915036819003821315610a2157600080fd5b9250929050565b600082821015610a4857634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b03811681146105d057600080fdfea26469706673582212201236d5a35c47c3cd268138290b00caa6cd796507431aaac2eac0327449bf6a1a64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063865781ca11610066578063865781ca146101215780638da5cb5b146101515780639dd1cda61461016c578063ad2390ac1461017d578063f2fde38b1461019057600080fd5b806301ffc9a7146100a357806365f04bb3146100cb5780636964f21b146100f1578063715018a614610106578063787dce3d1461010e575b600080fd5b6100b66100b13660046108ba565b6101a3565b60405190151581526020015b60405180910390f35b6002546100d89060e01b81565b6040516001600160e01b031990911681526020016100c2565b6101046100ff3660046108ba565b6101da565b005b6101046101fb565b61010461011c3660046109a8565b61020f565b61013461012f366004610934565b6102a8565b6040805193151584526020840192909252908201526060016100c2565b6000546040516001600160a01b0390911681526020016100c2565b6001546040519081526020016100c2565b61013461018b366004610934565b6103a1565b61010461019e366004610880565b61055a565b60006301ffc9a760e01b6001600160e01b0319831614806101d457506001600160e01b031982166302da977360e61b145b92915050565b6101e26105d3565b6002805463ffffffff191660e09290921c919091179055565b6102036105d3565b61020d600061062d565b565b6102176105d3565b600154811061026d5760405162461bcd60e51b815260206004820152601c60248201527f4f776e65723a2050726f746f636f6c2066656520746f6f20686967680000000060448201526064015b60405180910390fd5b60018190556040518181527f3e1c6f794380f768303ee10adb978482d0ee037b0517bdabf3118141632078a69060200160405180910390a150565b600254600090819081906102d89060e01b6102c96060870160408801610880565b6001600160a01b03169061067d565b6102f157506000915050608082013560a083013561039a565b60006103016101808601866109da565b81019061030e91906108e4565b90506103306103236060870160408801610880565b82516080880135906106a0565b61034a5750600092505050608082013560a083013561039a565b85604001358560600135148015610368575085606001358560800135145b801561037957504285610120013511155b801561038a57504285610140013510155b9350505050608082013560a08301355b9250925092565b600254600090819081906103c29060e01b6102c96060870160408801610880565b6103db57506000915050608082013560a083013561039a565b60006103ed6060860160408701610880565b60405163934689a960e01b8152608087013560048201526001600160a01b03919091169063934689a99060240160206040518083038186803b15801561043257600080fd5b505afa158015610446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046a919061089d565b90506001600160a01b0381166104866040870160208801610880565b6001600160a01b0316146104aa5750600092505050608082013560a083013561039a565b60006104b960a08801886109da565b8101906104c691906108e4565b90506104e86104db6060880160408901610880565b825160608a0135906106a0565b610503575060009350505050608082013560a083013561039a565b86604001358660600135148015610521575086606001358660800135145b801561053257504286610120013511155b801561054357504286610140013510155b976080870135975060a09096013595945050505050565b6105626105d3565b6001600160a01b0381166105c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610264565b6105d08161062d565b50565b6000546001600160a01b0316331461020d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610264565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610688836107c4565b8015610699575061069983836107f7565b9392505050565b604051634ea3325560e01b81526004810183905260009081906001600160a01b03861690634ea332559060240160206040518083038186803b1580156106e557600080fd5b505afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d91906109c1565b60405163753199c360e11b8152600481018690529091506000906001600160a01b0387169063ea6333869060240160206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b91906109c1565b9050836107a88383610a28565b106107b857600192505050610699565b50600095945050505050565b60006107d7826301ffc9a760e01b6107f7565b80156101d457506107f0826001600160e01b03196107f7565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610869575060208210155b80156108755750600081115b979650505050505050565b60006020828403121561089257600080fd5b813561069981610a4d565b6000602082840312156108af57600080fd5b815161069981610a4d565b6000602082840312156108cc57600080fd5b81356001600160e01b03198116811461069957600080fd5b6000602082840312156108f657600080fd5b6040516020810181811067ffffffffffffffff8211171561092757634e487b7160e01b600052604160045260246000fd5b6040529135825250919050565b6000806040838503121561094757600080fd5b823567ffffffffffffffff8082111561095f57600080fd5b9084019060c0828703121561097357600080fd5b9092506020840135908082111561098957600080fd5b508301610200818603121561099d57600080fd5b809150509250929050565b6000602082840312156109ba57600080fd5b5035919050565b6000602082840312156109d357600080fd5b5051919050565b6000808335601e198436030181126109f157600080fd5b83018035915067ffffffffffffffff821115610a0c57600080fd5b602001915036819003821315610a2157600080fd5b9250929050565b600082821015610a4857634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b03811681146105d057600080fdfea26469706673582212201236d5a35c47c3cd268138290b00caa6cd796507431aaac2eac0327449bf6a1a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerBid": "maker bid order",
          "takerAsk": "taker ask order"
        },
        "returns": {
          "_0": "(whether strategy can be executed, tokenId to execute, amount of tokens to execute)"
        }
      },
      "canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerAsk": "maker ask order",
          "takerBid": "taker bid order"
        },
        "returns": {
          "_0": "(whether strategy can be executed, tokenId to execute, amount of tokens to execute)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProtocolFee(uint256)": {
        "params": {
          "newProtocolFee": "protocol fee"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "viewProtocolFee()": {
        "returns": {
          "_0": "protocol fee"
        }
      }
    },
    "title": "StrategyStandardSaleForFixedPriceV1B",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check whether a taker ask order can be executed against a maker bid"
      },
      "canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check whether a taker bid order can be executed against a maker ask"
      },
      "setProtocolFee(uint256)": {
        "notice": "Set new protocol fee for this strategy"
      },
      "viewProtocolFee()": {
        "notice": "Return protocol fee for this strategy"
      }
    },
    "notice": "Strategy that executes an order at a fixed price that can be taken either by a bid or an ask.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2693,
        "contract": "contracts/executionStrategies/StrategyStandardSaleForFixedPriceDNFT.sol:StrategyStandardSaleForFixedPriceDNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11967,
        "contract": "contracts/executionStrategies/StrategyStandardSaleForFixedPriceDNFT.sol:StrategyStandardSaleForFixedPriceDNFT",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11969,
        "contract": "contracts/executionStrategies/StrategyStandardSaleForFixedPriceDNFT.sol:StrategyStandardSaleForFixedPriceDNFT",
        "label": "derivativeNFTInterfaceId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes4"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}