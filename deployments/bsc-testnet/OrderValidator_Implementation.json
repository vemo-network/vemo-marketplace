{
  "address": "0x4d3403228C61222Bd68F5eC219492C311b523aaB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRITERIA_GROUPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC1155",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC2981",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAGIC_VALUE_EIP1271",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STANDARD_ROYALTY_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_MANAGER_ERC1155",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_MANAGER_ERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder[]",
          "name": "makerOrders",
          "type": "tuple[]"
        }
      ],
      "name": "checkMultipleOrderValidities",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "validationCodes",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerOrder",
          "type": "tuple"
        }
      ],
      "name": "checkOrderValidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "validationCodes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerOrder",
          "type": "tuple"
        }
      ],
      "name": "checkValidityAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerOrder",
          "type": "tuple"
        }
      ],
      "name": "checkValidityApprovalsAndBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerOrder",
          "type": "tuple"
        }
      ],
      "name": "checkValidityMinPercentageToAsk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerOrder",
          "type": "tuple"
        }
      ],
      "name": "checkValidityNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerOrder",
          "type": "tuple"
        }
      ],
      "name": "checkValiditySignature",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerOrder",
          "type": "tuple"
        }
      ],
      "name": "checkValidityTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerOrder",
          "type": "tuple"
        }
      ],
      "name": "checkValidityWhitelists",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyManager",
      "outputs": [
        {
          "internalType": "contract ICurrencyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dareMarket",
      "outputs": [
        {
          "internalType": "contract DareMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executionManager",
      "outputs": [
        {
          "internalType": "contract IExecutionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dareMarket",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltyFeeRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferSelectorNFT",
      "outputs": [
        {
          "internalType": "contract ITransferSelectorNFTExtended",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb10c4bafe8001e4dea820109028e7247c8dc071f6509081471e9782f89f7d1b3",
  "receipt": {
    "to": null,
    "from": "0x19EcE7C90E631e9ece2494efaB9868C3047D6507",
    "contractAddress": "0x4d3403228C61222Bd68F5eC219492C311b523aaB",
    "transactionIndex": 9,
    "gasUsed": "2550109",
    "logsBloom": "0x
    "blockHash": "0xfbf533f43d830c0876d9eccf64bc8ecf830e32519f4dd78bc851d541df656d14",
    "transactionHash": "0xb10c4bafe8001e4dea820109028e7247c8dc071f6509081471e9782f89f7d1b3",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 27625034,
        "transactionHash": "0xb10c4bafe8001e4dea820109028e7247c8dc071f6509081471e9782f89f7d1b3",
        "address": "0x4d3403228C61222Bd68F5eC219492C311b523aaB",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 5,
        "blockHash": "0xfbf533f43d830c0876d9eccf64bc8ecf830e32519f4dd78bc851d541df656d14"
      }
    ],
    "blockNumber": 27625034,
    "cumulativeGasUsed": "2833891",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "8c1ec2c9f75681c602cfb14faddac386",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRITERIA_GROUPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC2981\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAGIC_VALUE_EIP1271\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STANDARD_ROYALTY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_MANAGER_ERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_MANAGER_ERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder[]\",\"name\":\"makerOrders\",\"type\":\"tuple[]\"}],\"name\":\"checkMultipleOrderValidities\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"validationCodes\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"checkOrderValidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"validationCodes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"checkValidityAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationCode\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"checkValidityApprovalsAndBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"checkValidityMinPercentageToAsk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"checkValidityNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"checkValiditySignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"checkValidityTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"checkValidityWhitelists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"internalType\":\"contract ICurrencyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dareMarket\",\"outputs\":[{\"internalType\":\"contract DareMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionManager\",\"outputs\":[{\"internalType\":\"contract IExecutionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dareMarket\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferSelectorNFT\",\"outputs\":[{\"internalType\":\"contract ITransferSelectorNFTExtended\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkMultipleOrderValidities((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32)[])\":{\"params\":{\"makerOrders\":\"Array of maker order structs\"},\"returns\":{\"validationCodes\":\"Array of validation code arrays for the maker orders\"}},\"checkOrderValidity((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerOrder\":\"Maker order struct\"},\"returns\":{\"validationCodes\":\"Array of validations code for each group\"}},\"checkValidityAmounts((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerOrder\":\"Maker order struct\"},\"returns\":{\"validationCode\":\"Validation code\"}},\"checkValidityApprovalsAndBalances((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerOrder\":\"Maker order struct\"},\"returns\":{\"validationCode\":\"Validation code\"}},\"checkValidityMinPercentageToAsk((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerOrder\":\"Maker order struct\"},\"returns\":{\"validationCode\":\"Validation code\"}},\"checkValidityNonces((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerOrder\":\"Maker order struct\"},\"returns\":{\"validationCode\":\"Validation code\"}},\"checkValiditySignature((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerOrder\":\"Maker order struct\"},\"returns\":{\"validationCode\":\"Validation code\"}},\"checkValidityTimestamps((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerOrder\":\"Maker order struct\"},\"returns\":{\"validationCode\":\"Validation code\"}},\"checkValidityWhitelists((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerOrder\":\"Maker order struct\"},\"returns\":{\"validationCode\":\"Validation code\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"_dareMarket\":\"address of the DareMarket\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"OrderValidator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkMultipleOrderValidities((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32)[])\":{\"notice\":\"Check the validities for an array of maker orders\"},\"checkOrderValidity((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check the validity of a maker order\"},\"checkValidityAmounts((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check the validity of amounts\"},\"checkValidityApprovalsAndBalances((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check the validity of approvals and balances\"},\"checkValidityMinPercentageToAsk((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check the validity of min percentage to ask\"},\"checkValidityNonces((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check the validity for user nonces\"},\"checkValiditySignature((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check the validity of a signature\"},\"checkValidityTimestamps((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check the validity of order timestamps\"},\"checkValidityWhitelists((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check the validity for currency/strategy whitelists\"},\"initialize(address,address)\":{\"notice\":\"Initialize\"}},\"notice\":\"This contract is used to check the validity of a maker order in the Protocol (v1).         It performs checks for:         1. Nonce-related issues (e.g., nonce executed or cancelled)         2. Amount-related issues (e.g. order amount being 0)         3. Signature-related issues         4. Whitelist-related issues (i.e., currency or strategy not whitelisted)         5. Fee-related issues (e.g., minPercentageToAsk too high due to changes in royalties)         6. Timestamp-related issues (e.g., order expired)         7. Transfer-related issues for ERC20/ERC721/ERC1155 (approvals and balances)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/orderValidation/OrderValidator.sol\":\"OrderValidator\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DareMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OpenZeppelin contracts\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// DareMarket interfaces\\nimport {ICurrencyManager} from \\\"./interfaces/ICurrencyManager.sol\\\";\\nimport {IExecutionManager} from \\\"./interfaces/IExecutionManager.sol\\\";\\nimport {IExecutionStrategy} from \\\"./interfaces/IExecutionStrategy.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {IDareMarket} from \\\"./interfaces/IDareMarket.sol\\\";\\nimport {ITransferManagerNFT} from \\\"./interfaces/ITransferManagerNFT.sol\\\";\\nimport {ITransferSelectorNFT} from \\\"./interfaces/ITransferSelectorNFT.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// DareMarket libraries\\nimport {OrderTypes} from \\\"./libraries/OrderTypes.sol\\\";\\nimport {SignatureChecker} from \\\"./libraries/SignatureChecker.sol\\\";\\nimport {ICallbackable} from \\\"./interfaces/ICallbackable.sol\\\";\\n\\n/**\\n * @title DareMarket\\n * @notice It is the core contract of the DareMarket.\\n */\\ncontract DareMarket is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IDareMarket\\n{\\n    using SafeERC20 for IERC20;\\n    using ERC165Checker for address;\\n    using Address for address;\\n\\n    using OrderTypes for OrderTypes.MakerOrder;\\n    using OrderTypes for OrderTypes.TakerOrder;\\n\\n    address public WETH;\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    address public protocolFeeRecipient;\\n\\n    ICurrencyManager public currencyManager;\\n    IExecutionManager public executionManager;\\n    IRoyaltyFeeManager public royaltyFeeManager;\\n    ITransferSelectorNFT public transferSelectorNFT;\\n\\n    mapping(address => uint256) public userMinOrderNonce;\\n    mapping(address => mapping(uint256 => bool))\\n        private _isUserOrderNonceExecutedOrCancelled;\\n\\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\\n    event NewCurrencyManager(address indexed currencyManager);\\n    event NewExecutionManager(address indexed executionManager);\\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\\n\\n    event RoyaltyPayment(\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        address indexed royaltyRecipient,\\n        address currency,\\n        uint256 amount\\n    );\\n\\n    event TakerAsk(\\n        bytes32 orderHash, // bid hash of the maker order\\n        uint256 orderNonce, // user order nonce\\n        address indexed taker, // sender address for the taker ask order\\n        address indexed maker, // maker address of the initial bid order\\n        address indexed strategy, // strategy that defines the execution\\n        address currency, // currency address\\n        address collection, // collection address\\n        uint256 tokenId, // tokenId transferred\\n        uint256 amount, // amount of tokens transferred\\n        uint256 price // final transacted price\\n    );\\n\\n    event TakerBid(\\n        bytes32 orderHash, // ask hash of the maker order\\n        uint256 orderNonce, // user order nonce\\n        address indexed taker, // sender address for the taker bid order\\n        address indexed maker, // maker address of the initial ask order\\n        address indexed strategy, // strategy that defines the execution\\n        address currency, // currency address\\n        address collection, // collection address\\n        uint256 tokenId, // tokenId transferred\\n        uint256 amount, // amount of tokens transferred\\n        uint256 price // final transacted price\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initialize\\n     * @param owner admin address\\n     * @param _currencyManager currency manager address\\n     * @param _executionManager execution manager address\\n     * @param _royaltyFeeManager royalty fee manager address\\n     * @param _WETH wrapped ether address (for other chains, use wrapped native asset)\\n     * @param _protocolFeeRecipient protocol fee recipient\\n     */\\n    function initialize(\\n        address owner,\\n        address _currencyManager,\\n        address _executionManager,\\n        address _royaltyFeeManager,\\n        address _WETH,\\n        address _protocolFeeRecipient\\n    ) public initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        address defaultAdmin = _msgSender();\\n        if (owner != address(0)) {\\n            defaultAdmin = owner;\\n        }\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n\\n        // Calculate the domain separator\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                0x98edd044cc1f206866579fa6fe22cf25941c105647a51c9bd8dc8caddb1ebbad, // keccak256(\\\"DareMarket\\\")\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        executionManager = IExecutionManager(_executionManager);\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        WETH = _WETH;\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Cancel all pending orders for a sender\\n     * @param minNonce minimum user nonce\\n     */\\n    function cancelAllOrdersForSender(uint256 minNonce) external {\\n        require(\\n            minNonce > userMinOrderNonce[msg.sender],\\n            \\\"Cancel: Order nonce lower than current\\\"\\n        );\\n        require(\\n            minNonce < userMinOrderNonce[msg.sender] + 500000,\\n            \\\"Cancel: Cannot cancel more orders\\\"\\n        );\\n        userMinOrderNonce[msg.sender] = minNonce;\\n\\n        emit CancelAllOrders(msg.sender, minNonce);\\n    }\\n\\n    /**\\n     * @notice Cancel maker orders\\n     * @param orderNonces array of order nonces\\n     */\\n    function cancelMultipleMakerOrders(\\n        uint256[] calldata orderNonces\\n    ) external {\\n        require(orderNonces.length > 0, \\\"Cancel: Cannot be empty\\\");\\n\\n        for (uint256 i = 0; i < orderNonces.length; i++) {\\n            require(\\n                orderNonces[i] >= userMinOrderNonce[msg.sender],\\n                \\\"Cancel: Order nonce lower than current\\\"\\n            );\\n            _isUserOrderNonceExecutedOrCancelled[msg.sender][\\n                orderNonces[i]\\n            ] = true;\\n        }\\n\\n        emit CancelMultipleOrders(msg.sender, orderNonces);\\n    }\\n\\n    /**\\n     * @notice Match ask with a taker bid order using ETH\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     */\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable override nonReentrant {\\n        require(\\n            (makerAsk.isOrderAsk) && (!takerBid.isOrderAsk),\\n            \\\"Order: Wrong sides\\\"\\n        );\\n        require(makerAsk.currency == WETH, \\\"Order: Currency must be WETH\\\");\\n        require(\\n            msg.sender == takerBid.taker,\\n            \\\"Order: Taker must be the sender\\\"\\n        );\\n\\n        // If not enough ETH to cover the price, use WETH\\n        if (takerBid.price > msg.value) {\\n            IERC20(WETH).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                (takerBid.price - msg.value)\\n            );\\n        } else {\\n            require(takerBid.price == msg.value, \\\"Order: Msg.value too high\\\");\\n        }\\n\\n        // Wrap ETH sent to this contract\\n        IWETH(WETH).deposit{value: msg.value}();\\n\\n        // Check the maker ask order\\n        bytes32 askHash = makerAsk.hash();\\n        _validateOrder(makerAsk, askHash);\\n\\n        // Retrieve execution parameters\\n        (\\n            bool isExecutionValid,\\n            uint256 tokenId,\\n            uint256 amount\\n        ) = IExecutionStrategy(makerAsk.strategy).canExecuteTakerBid(\\n                takerBid,\\n                makerAsk\\n            );\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker ask order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][\\n            makerAsk.nonce\\n        ] = true;\\n\\n        _invokeCallbackable(\\n            makerAsk.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.beforeTransferFeeAndFunds.selector,\\n                makerAsk,\\n                takerBid\\n            )\\n        );\\n\\n        // Execution part 1/2\\n        _transferFeesAndFundsWithWETH(\\n            makerAsk.strategy,\\n            makerAsk.collection,\\n            tokenId,\\n            makerAsk.signer,\\n            takerBid.price,\\n            makerAsk.minPercentageToAsk\\n        );\\n\\n        _invokeCallbackable(\\n            makerAsk.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.beforeTransferNonFungibleToken.selector,\\n                makerAsk,\\n                takerBid\\n            )\\n        );\\n\\n        // Execution part 2/2\\n        _transferNonFungibleToken(\\n            makerAsk.collection,\\n            makerAsk.signer,\\n            takerBid.taker,\\n            tokenId,\\n            amount\\n        );\\n\\n        _invokeCallbackable(\\n            makerAsk.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.afterTransferNonFungibleToken.selector,\\n                makerAsk,\\n                takerBid\\n            )\\n        );\\n\\n        emit TakerBid(\\n            askHash,\\n            makerAsk.nonce,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            makerAsk.strategy,\\n            makerAsk.currency,\\n            makerAsk.collection,\\n            tokenId,\\n            amount,\\n            takerBid.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Match a takerBid with a matchAsk\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     */\\n    function matchAskWithTakerBid(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external override nonReentrant {\\n        require(\\n            (makerAsk.isOrderAsk) && (!takerBid.isOrderAsk),\\n            \\\"Order: Wrong sides\\\"\\n        );\\n        require(\\n            msg.sender == takerBid.taker,\\n            \\\"Order: Taker must be the sender\\\"\\n        );\\n\\n        // Check the maker ask order\\n        bytes32 askHash = makerAsk.hash();\\n        _validateOrder(makerAsk, askHash);\\n\\n        (\\n            bool isExecutionValid,\\n            uint256 tokenId,\\n            uint256 amount\\n        ) = IExecutionStrategy(makerAsk.strategy).canExecuteTakerBid(\\n                takerBid,\\n                makerAsk\\n            );\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker ask order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][\\n            makerAsk.nonce\\n        ] = true;\\n\\n        _invokeCallbackable(\\n            makerAsk.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.beforeTransferFeeAndFunds.selector,\\n                makerAsk,\\n                takerBid\\n            )\\n        );\\n\\n        // Execution part 1/2\\n        _transferFeesAndFunds(\\n            makerAsk.strategy,\\n            makerAsk.collection,\\n            tokenId,\\n            makerAsk.currency,\\n            msg.sender,\\n            makerAsk.signer,\\n            takerBid.price,\\n            makerAsk.minPercentageToAsk\\n        );\\n\\n        _invokeCallbackable(\\n            makerAsk.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.beforeTransferNonFungibleToken.selector,\\n                makerAsk,\\n                takerBid\\n            )\\n        );\\n\\n        // Execution part 2/2\\n        _transferNonFungibleToken(\\n            makerAsk.collection,\\n            makerAsk.signer,\\n            takerBid.taker,\\n            tokenId,\\n            amount\\n        );\\n\\n        _invokeCallbackable(\\n            makerAsk.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.afterTransferNonFungibleToken.selector,\\n                makerAsk,\\n                takerBid\\n            )\\n        );\\n\\n        emit TakerBid(\\n            askHash,\\n            makerAsk.nonce,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            makerAsk.strategy,\\n            makerAsk.currency,\\n            makerAsk.collection,\\n            tokenId,\\n            amount,\\n            takerBid.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Match a takerAsk with a makerBid\\n     * @param takerAsk taker ask order\\n     * @param makerBid maker bid order\\n     */\\n    function matchBidWithTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    ) external override nonReentrant {\\n        require(\\n            (!makerBid.isOrderAsk) && (takerAsk.isOrderAsk),\\n            \\\"Order: Wrong sides\\\"\\n        );\\n        require(\\n            msg.sender == takerAsk.taker,\\n            \\\"Order: Taker must be the sender\\\"\\n        );\\n\\n        // Check the maker bid order\\n        bytes32 bidHash = makerBid.hash();\\n        _validateOrder(makerBid, bidHash);\\n\\n        (\\n            bool isExecutionValid,\\n            uint256 tokenId,\\n            uint256 amount\\n        ) = IExecutionStrategy(makerBid.strategy).canExecuteTakerAsk(\\n                takerAsk,\\n                makerBid\\n            );\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker bid order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerBid.signer][\\n            makerBid.nonce\\n        ] = true;\\n\\n        _invokeCallbackable(\\n            makerBid.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.beforeTransferFeeAndFunds.selector,\\n                makerBid,\\n                takerAsk\\n            )\\n        );\\n\\n        // Execution part 1/2\\n        _transferNonFungibleToken(\\n            makerBid.collection,\\n            msg.sender,\\n            makerBid.signer,\\n            tokenId,\\n            amount\\n        );\\n\\n        _invokeCallbackable(\\n            makerBid.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.beforeTransferNonFungibleToken.selector,\\n                makerBid,\\n                takerAsk\\n            )\\n        );\\n\\n        // Execution part 2/2\\n        _transferFeesAndFunds(\\n            makerBid.strategy,\\n            makerBid.collection,\\n            tokenId,\\n            makerBid.currency,\\n            makerBid.signer,\\n            takerAsk.taker,\\n            takerAsk.price,\\n            takerAsk.minPercentageToAsk\\n        );\\n\\n        _invokeCallbackable(\\n            makerBid.strategy,\\n            abi.encodeWithSelector(\\n                ICallbackable.afterTransferNonFungibleToken.selector,\\n                makerBid,\\n                takerAsk\\n            )\\n        );\\n\\n        emit TakerAsk(\\n            bidHash,\\n            makerBid.nonce,\\n            takerAsk.taker,\\n            makerBid.signer,\\n            makerBid.strategy,\\n            makerBid.currency,\\n            makerBid.collection,\\n            tokenId,\\n            amount,\\n            takerAsk.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Update currency manager\\n     * @param _currencyManager new currency manager address\\n     */\\n    function updateCurrencyManager(\\n        address _currencyManager\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            _currencyManager != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        emit NewCurrencyManager(_currencyManager);\\n    }\\n\\n    /**\\n     * @notice Update execution manager\\n     * @param _executionManager new execution manager address\\n     */\\n    function updateExecutionManager(\\n        address _executionManager\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            _executionManager != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        executionManager = IExecutionManager(_executionManager);\\n        emit NewExecutionManager(_executionManager);\\n    }\\n\\n    /**\\n     * @notice Update protocol fee and recipient\\n     * @param _protocolFeeRecipient new recipient for protocol fees\\n     */\\n    function updateProtocolFeeRecipient(\\n        address _protocolFeeRecipient\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /**\\n     * @notice Update royalty fee manager\\n     * @param _royaltyFeeManager new fee manager address\\n     */\\n    function updateRoyaltyFeeManager(\\n        address _royaltyFeeManager\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            _royaltyFeeManager != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\\n    }\\n\\n    /**\\n     * @notice Update transfer selector NFT\\n     * @param _transferSelectorNFT new transfer selector address\\n     */\\n    function updateTransferSelectorNFT(\\n        address _transferSelectorNFT\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            _transferSelectorNFT != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        transferSelectorNFT = ITransferSelectorNFT(_transferSelectorNFT);\\n\\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\\n    }\\n\\n    /**\\n     * @notice Check whether user order nonce is executed or cancelled\\n     * @param user address of user\\n     * @param orderNonce nonce of the order\\n     */\\n    function isUserOrderNonceExecutedOrCancelled(\\n        address user,\\n        uint256 orderNonce\\n    ) external view returns (bool) {\\n        return _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\\n    }\\n\\n    /**\\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n     * @param strategy address of the execution strategy\\n     * @param collection non fungible token address for the transfer\\n     * @param tokenId tokenId\\n     * @param currency currency being used for the purchase (e.g., WETH/USDC)\\n     * @param from sender of the funds\\n     * @param to seller's recipient\\n     * @param amount amount being transferred (in currency)\\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n     */\\n    function _transferFeesAndFunds(\\n        address strategy,\\n        address collection,\\n        uint256 tokenId,\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = amount;\\n\\n        // 1. Protocol fee\\n        {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if (\\n                (protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)\\n            ) {\\n                IERC20(currency).safeTransferFrom(\\n                    from,\\n                    protocolFeeRecipient,\\n                    protocolFeeAmount\\n                );\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (\\n                address royaltyFeeRecipient,\\n                uint256 royaltyFeeAmount\\n            ) = royaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\\n                    collection,\\n                    tokenId,\\n                    amount\\n                );\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if (\\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\\n            ) {\\n                IERC20(currency).safeTransferFrom(\\n                    from,\\n                    royaltyFeeRecipient,\\n                    royaltyFeeAmount\\n                );\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(\\n                    collection,\\n                    tokenId,\\n                    royaltyFeeRecipient,\\n                    currency,\\n                    royaltyFeeAmount\\n                );\\n            }\\n        }\\n\\n        require(\\n            (finalSellerAmount * 10000) >= (minPercentageToAsk * amount),\\n            \\\"Fees: Higher than expected\\\"\\n        );\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            IERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n     * @param strategy address of the execution strategy\\n     * @param collection non fungible token address for the transfer\\n     * @param tokenId tokenId\\n     * @param to seller's recipient\\n     * @param amount amount being transferred (in currency)\\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n     */\\n    function _transferFeesAndFundsWithWETH(\\n        address strategy,\\n        address collection,\\n        uint256 tokenId,\\n        address to,\\n        uint256 amount,\\n        uint256 minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = amount;\\n\\n        // 1. Protocol fee\\n        {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if (\\n                (protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)\\n            ) {\\n                IERC20(WETH).safeTransfer(\\n                    protocolFeeRecipient,\\n                    protocolFeeAmount\\n                );\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (\\n                address royaltyFeeRecipient,\\n                uint256 royaltyFeeAmount\\n            ) = royaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\\n                    collection,\\n                    tokenId,\\n                    amount\\n                );\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if (\\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\\n            ) {\\n                IERC20(WETH).safeTransfer(\\n                    royaltyFeeRecipient,\\n                    royaltyFeeAmount\\n                );\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(\\n                    collection,\\n                    tokenId,\\n                    royaltyFeeRecipient,\\n                    address(WETH),\\n                    royaltyFeeAmount\\n                );\\n            }\\n        }\\n\\n        require(\\n            (finalSellerAmount * 10000) >= (minPercentageToAsk * amount),\\n            \\\"Fees: Higher than expected\\\"\\n        );\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            IERC20(WETH).safeTransfer(to, finalSellerAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer NFT\\n     * @param collection address of the token collection\\n     * @param from address of the sender\\n     * @param to address of the recipient\\n     * @param tokenId tokenId\\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\\n     * @dev For ERC721, amount is not used\\n     */\\n    function _transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        // Retrieve the transfer manager address\\n        address transferManager = transferSelectorNFT\\n            .checkTransferManagerForToken(collection);\\n\\n        // If no transfer manager found, it returns address(0)\\n        require(\\n            transferManager != address(0),\\n            \\\"Transfer: No NFT transfer manager available\\\"\\n        );\\n\\n        // If one is found, transfer the token\\n        ITransferManagerNFT(transferManager).transferNonFungibleToken(\\n            collection,\\n            from,\\n            to,\\n            tokenId,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate protocol fee for an execution strategy\\n     * @param executionStrategy strategy\\n     * @param amount amount to transfer\\n     */\\n    function _calculateProtocolFee(\\n        address executionStrategy,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        uint256 protocolFee = IExecutionStrategy(executionStrategy)\\n            .viewProtocolFee();\\n        return (protocolFee * amount) / 10000;\\n    }\\n\\n    /**\\n     * @notice Verify the validity of the maker order\\n     * @param makerOrder maker order\\n     * @param orderHash computed hash for the order\\n     */\\n    function _validateOrder(\\n        OrderTypes.MakerOrder calldata makerOrder,\\n        bytes32 orderHash\\n    ) internal view {\\n        // Verify whether order nonce has expired\\n        require(\\n            (\\n                !_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][\\n                    makerOrder.nonce\\n                ]\\n            ) && (makerOrder.nonce >= userMinOrderNonce[makerOrder.signer]),\\n            \\\"Order: Matching order expired\\\"\\n        );\\n\\n        // Verify the signer is not address(0)\\n        require(makerOrder.signer != address(0), \\\"Order: Invalid signer\\\");\\n\\n        // Verify the amount is not 0\\n        require(makerOrder.amount > 0, \\\"Order: Amount cannot be 0\\\");\\n\\n        // Verify the validity of the signature\\n        require(\\n            SignatureChecker.verify(\\n                orderHash,\\n                makerOrder.signer,\\n                makerOrder.v,\\n                makerOrder.r,\\n                makerOrder.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            \\\"Signature: Invalid\\\"\\n        );\\n\\n        // Verify whether the currency is whitelisted\\n        require(\\n            currencyManager.isCurrencyWhitelisted(makerOrder.currency),\\n            \\\"Currency: Not whitelisted\\\"\\n        );\\n\\n        // Verify whether strategy can be executed\\n        require(\\n            executionManager.isStrategyWhitelisted(makerOrder.strategy),\\n            \\\"Strategy: Not whitelisted\\\"\\n        );\\n    }\\n\\n    function _invokeCallbackable(\\n        address strategy,\\n        bytes memory data\\n    ) internal virtual {\\n        if (strategy.supportsInterface(type(ICallbackable).interfaceId)) {\\n            strategy.functionCall(data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd11d6683eac109ecf2f07d52ac8675b3de96861218678e1238b81bd2b40fae8\",\"license\":\"MIT\"},\"contracts/interfaces/ICallbackable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ICallbackable is IERC165 {\\n    function beforeTransferFeeAndFunds(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external;\\n\\n    function beforeTransferNonFungibleToken(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external;\\n\\n    function afterTransferNonFungibleToken(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb13b88abad2184fcafcc5d0c47fa035c845401fedb57904d3d51c29a6b512b6\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurrencyManager {\\n    function addCurrency(address currency) external;\\n\\n    function removeCurrency(address currency) external;\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x84efd5a181382b52be6519fedd476a19e97f78a7d526d852fa0c0653a121538f\",\"license\":\"MIT\"},\"contracts/interfaces/IDareMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IDareMarket {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable;\\n\\n    function matchAskWithTakerBid(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external;\\n\\n    function matchBidWithTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf4d481f827fcafb042049bd88fcf18841c5b311b57fb5da211f83f26666924a0\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExecutionManager {\\n    function addStrategy(address strategy) external;\\n\\n    function removeStrategy(address strategy) external;\\n\\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\\n\\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedStrategies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x79dbfcddeb540de734f1d722417be03c88800b2fa9195ab4f1a82e380e27fcf3\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IExecutionStrategy {\\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function viewProtocolFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73358a44547840affea91c5d25cda3eaa86bf4cf3865888b0684137caa74606d\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xe91c4fa5c0ae8f35521d0853efcb9e617299909032bce6e98981d11c06088bc6\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x08bb49ca883e5d06f5dc90b3d4230d33a2e7d8da449ceb5392d7c4c7671de171\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferManagerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferManagerNFT {\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x725f4c4a9b85f34b496d26562c0d9c09aeeeb8275e7ceaac5eb411810cc12301\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferSelectorNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferSelectorNFT {\\n    function checkTransferManagerForToken(address collection) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd818a349d84d682d0c841c4b23fdc8f0b9bfb2ee4ffee59775cc3fe92d561c2f\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GNU\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x54b6f68eca905d0b5c70c2c21a1ce3a5451b65e0771280774af4b72330c19f22\",\"license\":\"GNU\"},\"contracts/libraries/OrderTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderTypes\\n * @notice This library contains order types for the DareMarket.\\n */\\nlibrary OrderTypes {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH =\\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n\\n    function hash(MakerOrder memory makerOrder)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe58bc034fa1e6b210060eac49ee3d250d6cbeabbb122c398404e4adf667dc631\",\"license\":\"MIT\"},\"contracts/libraries/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Signature: Invalid s parameter\\\"\\n        );\\n\\n        require(v == 27 || v == 28, \\\"Signature: Invalid v parameter\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"Signature: Invalid signer\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87fa4809c36ac19a4d98136139350ce21adc4394ef574f710b62c6297741ce26\",\"license\":\"MIT\"},\"contracts/orderValidation/ExtendedInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IRoyaltyFeeRegistry} from \\\"../interfaces/IRoyaltyFeeRegistry.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"../interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {ITransferSelectorNFT} from \\\"../interfaces/ITransferSelectorNFT.sol\\\";\\n\\ninterface IRoyaltyFeeManagerExtended is IRoyaltyFeeManager {\\n    function royaltyFeeRegistry() external view returns (IRoyaltyFeeRegistry);\\n}\\n\\ninterface IRoyaltyFeeManagerV1BExtended is IRoyaltyFeeManager {\\n    function STANDARD_ROYALTY_FEE() external view returns (uint256);\\n\\n    function royaltyFeeRegistry() external view returns (IRoyaltyFeeRegistry);\\n}\\n\\ninterface ITransferSelectorNFTExtended is ITransferSelectorNFT {\\n    function TRANSFER_MANAGER_ERC721() external view returns (address);\\n\\n    function TRANSFER_MANAGER_ERC1155() external view returns (address);\\n\\n    function transferManagerSelectorForCollection(address collection) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe7cc95af58a66ccd7b9daace05d7a49ba348985d0b3e107f8066156e6225c050\",\"license\":\"MIT\"},\"contracts/orderValidation/OrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OZ dependencies\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165, IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n// DareMarket libraries and validation code constants\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\nimport \\\"./ValidationCodeConstants.sol\\\";\\n\\n// DareMarket interfaces\\nimport {ICurrencyManager} from \\\"../interfaces/ICurrencyManager.sol\\\";\\nimport {IExecutionManager} from \\\"../interfaces/IExecutionManager.sol\\\";\\nimport {IExecutionStrategy} from \\\"../interfaces/IExecutionStrategy.sol\\\";\\nimport {IRoyaltyFeeRegistry} from \\\"../interfaces/IRoyaltyFeeRegistry.sol\\\";\\nimport {ITransferManagerNFT} from \\\"../interfaces/ITransferManagerNFT.sol\\\";\\nimport {ITransferSelectorNFTExtended, IRoyaltyFeeManagerExtended} from \\\"./ExtendedInterfaces.sol\\\";\\n\\n// DareMarket\\nimport {DareMarket} from \\\"../DareMarket.sol\\\";\\n\\n/**\\n * @title OrderValidator\\n * @notice This contract is used to check the validity of a maker order in the Protocol (v1).\\n *         It performs checks for:\\n *         1. Nonce-related issues (e.g., nonce executed or cancelled)\\n *         2. Amount-related issues (e.g. order amount being 0)\\n *         3. Signature-related issues\\n *         4. Whitelist-related issues (i.e., currency or strategy not whitelisted)\\n *         5. Fee-related issues (e.g., minPercentageToAsk too high due to changes in royalties)\\n *         6. Timestamp-related issues (e.g., order expired)\\n *         7. Transfer-related issues for ERC20/ERC721/ERC1155 (approvals and balances)\\n */\\ncontract OrderValidator is Initializable, AccessControlUpgradeable {\\n    using OrderTypes for OrderTypes.MakerOrder;\\n\\n    // Number of distinct criteria groups checked to evaluate the validity\\n    uint256 public constant CRITERIA_GROUPS = 8;\\n\\n    // ERC721 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    // ERC1155 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    // ERC2981 interfaceId\\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    // EIP1271 magic value\\n    bytes4 public constant MAGIC_VALUE_EIP1271 = 0x1626ba7e;\\n\\n    // TransferManager ERC721\\n    address public TRANSFER_MANAGER_ERC721;\\n\\n    // TransferManager ERC1155\\n    address public TRANSFER_MANAGER_ERC1155;\\n\\n    // Domain separator from DareMarket\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    // Standard royalty fee\\n    uint256 public STANDARD_ROYALTY_FEE;\\n\\n    // Currency Manager\\n    ICurrencyManager public currencyManager;\\n\\n    // Execution Manager\\n    IExecutionManager public executionManager;\\n\\n    // Royalty Fee Registry\\n    IRoyaltyFeeRegistry public royaltyFeeRegistry;\\n\\n    // Transfer Selector\\n    ITransferSelectorNFTExtended public transferSelectorNFT;\\n\\n    // DareMarket\\n    DareMarket public dareMarket;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initialize\\n     * @param _dareMarket address of the DareMarket\\n     */\\n    function initialize(address owner, address _dareMarket) public initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n\\n        address defaultAdmin = _msgSender();\\n        if (owner != address(0)) {\\n            defaultAdmin = owner;\\n        }\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n\\n        dareMarket = DareMarket(_dareMarket);\\n        DOMAIN_SEPARATOR = DareMarket(_dareMarket).DOMAIN_SEPARATOR();\\n\\n        TRANSFER_MANAGER_ERC721 = ITransferSelectorNFTExtended(\\n            address(DareMarket(_dareMarket).transferSelectorNFT())\\n        ).TRANSFER_MANAGER_ERC721();\\n\\n        TRANSFER_MANAGER_ERC1155 = ITransferSelectorNFTExtended(\\n            address(DareMarket(_dareMarket).transferSelectorNFT())\\n        ).TRANSFER_MANAGER_ERC1155();\\n\\n        currencyManager = DareMarket(_dareMarket).currencyManager();\\n        executionManager = DareMarket(_dareMarket).executionManager();\\n        transferSelectorNFT = ITransferSelectorNFTExtended(\\n            address(DareMarket(_dareMarket).transferSelectorNFT())\\n        );\\n\\n        IRoyaltyFeeManagerExtended royaltyFeeManager = IRoyaltyFeeManagerExtended(\\n                address(DareMarket(_dareMarket).royaltyFeeManager())\\n            );\\n        royaltyFeeRegistry = royaltyFeeManager.royaltyFeeRegistry();\\n    }\\n\\n    /**\\n     * @notice Check the validities for an array of maker orders\\n     * @param makerOrders Array of maker order structs\\n     * @return validationCodes Array of validation code arrays for the maker orders\\n     */\\n    function checkMultipleOrderValidities(\\n        OrderTypes.MakerOrder[] calldata makerOrders\\n    ) public view returns (uint256[][] memory validationCodes) {\\n        validationCodes = new uint256[][](makerOrders.length);\\n\\n        for (uint256 i; i < makerOrders.length; ) {\\n            validationCodes[i] = checkOrderValidity(makerOrders[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check the validity of a maker order\\n     * @param makerOrder Maker order struct\\n     * @return validationCodes Array of validations code for each group\\n     */\\n    function checkOrderValidity(\\n        OrderTypes.MakerOrder calldata makerOrder\\n    ) public view returns (uint256[] memory validationCodes) {\\n        validationCodes = new uint256[](CRITERIA_GROUPS);\\n        validationCodes[0] = checkValidityNonces(makerOrder);\\n        validationCodes[1] = checkValidityAmounts(makerOrder);\\n        validationCodes[2] = checkValiditySignature(makerOrder);\\n        validationCodes[3] = checkValidityWhitelists(makerOrder);\\n        validationCodes[4] = checkValidityMinPercentageToAsk(makerOrder);\\n        validationCodes[5] = checkValidityTimestamps(makerOrder);\\n        (\\n            uint256 validationApprovalsAndBalancesCode,\\n            uint256 tokenType\\n        ) = checkValidityApprovalsAndBalances(makerOrder);\\n        validationCodes[6] = validationApprovalsAndBalancesCode;\\n        validationCodes[7] = tokenType;\\n    }\\n\\n    /**\\n     * @notice Check the validity for user nonces\\n     * @param makerOrder Maker order struct\\n     * @return validationCode Validation code\\n     */\\n    function checkValidityNonces(\\n        OrderTypes.MakerOrder calldata makerOrder\\n    ) public view returns (uint256 validationCode) {\\n        if (\\n            dareMarket.isUserOrderNonceExecutedOrCancelled(\\n                makerOrder.signer,\\n                makerOrder.nonce\\n            )\\n        ) return NONCE_EXECUTED_OR_CANCELLED;\\n        if (makerOrder.nonce < dareMarket.userMinOrderNonce(makerOrder.signer))\\n            return NONCE_BELOW_MIN_ORDER_NONCE;\\n    }\\n\\n    /**\\n     * @notice Check the validity of amounts\\n     * @param makerOrder Maker order struct\\n     * @return validationCode Validation code\\n     */\\n    function checkValidityAmounts(\\n        OrderTypes.MakerOrder calldata makerOrder\\n    ) public pure returns (uint256 validationCode) {\\n        if (makerOrder.amount == 0) return ORDER_AMOUNT_CANNOT_BE_ZERO;\\n    }\\n\\n    /**\\n     * @notice Check the validity of a signature\\n     * @param makerOrder Maker order struct\\n     * @return validationCode Validation code\\n     */\\n    function checkValiditySignature(\\n        OrderTypes.MakerOrder calldata makerOrder\\n    ) public view returns (uint256 validationCode) {\\n        if (makerOrder.signer == address(0)) return MAKER_SIGNER_IS_NULL_SIGNER;\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, makerOrder.hash())\\n        );\\n\\n        if (!AddressUpgradeable.isContract(makerOrder.signer)) {\\n            return\\n                _validateEOA(\\n                    digest,\\n                    makerOrder.signer,\\n                    makerOrder.v,\\n                    makerOrder.r,\\n                    makerOrder.s\\n                );\\n        } else {\\n            return\\n                _validateERC1271(\\n                    digest,\\n                    makerOrder.signer,\\n                    makerOrder.v,\\n                    makerOrder.r,\\n                    makerOrder.s\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Check the validity for currency/strategy whitelists\\n     * @param makerOrder Maker order struct\\n     * @return validationCode Validation code\\n     */\\n    function checkValidityWhitelists(\\n        OrderTypes.MakerOrder calldata makerOrder\\n    ) public view returns (uint256 validationCode) {\\n        // Verify whether the currency is whitelisted\\n        if (!currencyManager.isCurrencyWhitelisted(makerOrder.currency))\\n            return CURRENCY_NOT_WHITELISTED;\\n\\n        // Verify whether the strategy is whitelisted\\n        if (!executionManager.isStrategyWhitelisted(makerOrder.strategy))\\n            return STRATEGY_NOT_WHITELISTED;\\n    }\\n\\n    /**\\n     * @notice Check the validity of min percentage to ask\\n     * @param makerOrder Maker order struct\\n     * @return validationCode Validation code\\n     */\\n    function checkValidityMinPercentageToAsk(\\n        OrderTypes.MakerOrder calldata makerOrder\\n    ) public view returns (uint256 validationCode) {\\n        // Return if order is bid since there is no protection for minPercentageToAsk\\n        if (!makerOrder.isOrderAsk) return ORDER_EXPECTED_TO_BE_VALID;\\n\\n        uint256 minNetPriceToAsk = (makerOrder.minPercentageToAsk *\\n            makerOrder.price);\\n\\n        uint256 finalSellerAmount = makerOrder.price;\\n        uint256 protocolFee = (makerOrder.price *\\n            IExecutionStrategy(makerOrder.strategy).viewProtocolFee()) / 10000;\\n        finalSellerAmount -= protocolFee;\\n\\n        if ((finalSellerAmount * 10000) < minNetPriceToAsk)\\n            return MIN_NET_RATIO_ABOVE_PROTOCOL_FEE;\\n\\n        (address receiver, uint256 royaltyAmount) = royaltyFeeRegistry\\n            .royaltyInfo(makerOrder.collection, makerOrder.price);\\n\\n        if (receiver != address(0) && royaltyAmount != 0) {\\n            // Royalty registry logic\\n            finalSellerAmount -= royaltyAmount;\\n            if ((finalSellerAmount * 10000) < minNetPriceToAsk)\\n                return\\n                    MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE;\\n        } else {\\n            // ERC2981 logic\\n            if (\\n                IERC165(makerOrder.collection).supportsInterface(\\n                    INTERFACE_ID_ERC2981\\n                )\\n            ) {\\n                (bool success, bytes memory data) = makerOrder\\n                    .collection\\n                    .staticcall(\\n                        abi.encodeWithSelector(\\n                            IERC2981.royaltyInfo.selector,\\n                            makerOrder.tokenId,\\n                            makerOrder.price\\n                        )\\n                    );\\n\\n                if (!success) {\\n                    return MISSING_ROYALTY_INFO_FUNCTION_ERC2981;\\n                } else {\\n                    (receiver, royaltyAmount) = abi.decode(\\n                        data,\\n                        (address, uint256)\\n                    );\\n                }\\n\\n                if (receiver != address(0)) {\\n                    finalSellerAmount -= royaltyAmount;\\n                    if ((finalSellerAmount * 10000) < minNetPriceToAsk)\\n                        return\\n                            MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check the validity of order timestamps\\n     * @param makerOrder Maker order struct\\n     * @return validationCode Validation code\\n     */\\n    function checkValidityTimestamps(\\n        OrderTypes.MakerOrder calldata makerOrder\\n    ) public view returns (uint256 validationCode) {\\n        if (makerOrder.startTime > block.timestamp)\\n            return TOO_EARLY_TO_EXECUTE_ORDER;\\n        if (makerOrder.endTime < block.timestamp)\\n            return TOO_LATE_TO_EXECUTE_ORDER;\\n    }\\n\\n    /**\\n     * @notice Check the validity of approvals and balances\\n     * @param makerOrder Maker order struct\\n     * @return validationCode Validation code\\n     */\\n    function checkValidityApprovalsAndBalances(\\n        OrderTypes.MakerOrder calldata makerOrder\\n    ) public view returns (uint256 validationCode, uint256 nftType) {\\n        if (makerOrder.isOrderAsk) {\\n            return\\n                _validateNFTApprovals(\\n                    makerOrder.collection,\\n                    makerOrder.signer,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount\\n                );\\n        } else {\\n            return\\n                _validateERC20(\\n                    makerOrder.currency,\\n                    makerOrder.signer,\\n                    makerOrder.price\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Check the validity of NFT approvals and balances\\n     * @param collection Collection address\\n     * @param user User address\\n     * @param tokenId TokenId\\n     * @param amount Amount\\n     */\\n    function _validateNFTApprovals(\\n        address collection,\\n        address user,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal view returns (uint256 validationCode, uint256 nftType) {\\n        address transferManager;\\n\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            transferManager = TRANSFER_MANAGER_ERC721;\\n            nftType = 721;\\n        } else if (\\n            IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)\\n        ) {\\n            transferManager = TRANSFER_MANAGER_ERC1155;\\n            nftType = 1155;\\n        } else {\\n            transferManager = transferSelectorNFT\\n                .transferManagerSelectorForCollection(collection);\\n        }\\n\\n        if (transferManager == address(0))\\n            return (NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION, nftType);\\n\\n        if (transferManager == TRANSFER_MANAGER_ERC721) {\\n            return (\\n                _validateERC721AndEquivalents(\\n                    collection,\\n                    user,\\n                    transferManager,\\n                    tokenId\\n                ),\\n                nftType\\n            );\\n        } else if (transferManager == TRANSFER_MANAGER_ERC1155) {\\n            return (\\n                _validateERC1155(\\n                    collection,\\n                    user,\\n                    transferManager,\\n                    tokenId,\\n                    amount\\n                ),\\n                nftType\\n            );\\n        } else {\\n            return (CUSTOM_TRANSFER_MANAGER, nftType);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check the validity of ERC20 approvals and balances that are required to process the maker bid order\\n     * @param currency Currency address\\n     * @param user User address\\n     * @param price Price (defined by the maker order)\\n     */\\n    function _validateERC20(\\n        address currency,\\n        address user,\\n        uint256 price\\n    ) internal view returns (uint256 validationCode, uint256 currencyType) {\\n        if (IERC20(currency).balanceOf(user) < price)\\n            return (ERC20_BALANCE_INFERIOR_TO_PRICE, 20);\\n        if (IERC20(currency).allowance(user, address(dareMarket)) < price)\\n            return (ERC20_APPROVAL_INFERIOR_TO_PRICE, 20);\\n    }\\n\\n    /**\\n     * @notice Check the validity of ERC721 approvals and balances required to process the maker ask order\\n     * @param collection Collection address\\n     * @param user User address\\n     * @param transferManager Transfer manager address\\n     * @param tokenId TokenId\\n     */\\n    function _validateERC721AndEquivalents(\\n        address collection,\\n        address user,\\n        address transferManager,\\n        uint256 tokenId\\n    ) internal view returns (uint256 validationCode) {\\n        // 1. Verify tokenId is owned by user and catch revertion if ERC721 ownerOf fails\\n        (bool success, bytes memory data) = collection.staticcall(\\n            abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId)\\n        );\\n\\n        if (!success) return ERC721_TOKEN_ID_DOES_NOT_EXIST;\\n        if (abi.decode(data, (address)) != user)\\n            return ERC721_TOKEN_ID_NOT_IN_BALANCE;\\n\\n        // 2. Verify if collection is approved by transfer manager\\n        (success, data) = collection.staticcall(\\n            abi.encodeWithSelector(\\n                IERC721.isApprovedForAll.selector,\\n                user,\\n                transferManager\\n            )\\n        );\\n\\n        bool isApprovedAll;\\n        if (success) {\\n            isApprovedAll = abi.decode(data, (bool));\\n        }\\n\\n        if (!isApprovedAll) {\\n            // 3. If collection is not approved by transfer manager, try to see if it is approved individually\\n            (success, data) = collection.staticcall(\\n                abi.encodeWithSelector(IERC721.getApproved.selector, tokenId)\\n            );\\n\\n            address approvedAddress;\\n            if (success) {\\n                approvedAddress = abi.decode(data, (address));\\n            }\\n\\n            if (approvedAddress != transferManager)\\n                return ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check the validity of ERC1155 approvals and balances required to process the maker ask order\\n     * @param collection Collection address\\n     * @param user User address\\n     * @param transferManager Transfer manager address\\n     * @param tokenId TokenId\\n     * @param amount Amount\\n     */\\n    function _validateERC1155(\\n        address collection,\\n        address user,\\n        address transferManager,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal view returns (uint256 validationCode) {\\n        (bool success, bytes memory data) = collection.staticcall(\\n            abi.encodeWithSelector(IERC1155.balanceOf.selector, user, tokenId)\\n        );\\n\\n        if (!success) return ERC1155_BALANCE_OF_DOES_NOT_EXIST;\\n        if (abi.decode(data, (uint256)) < amount)\\n            return ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT;\\n\\n        (success, data) = collection.staticcall(\\n            abi.encodeWithSelector(\\n                IERC1155.isApprovedForAll.selector,\\n                user,\\n                transferManager\\n            )\\n        );\\n\\n        if (!success) return ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST;\\n        if (!abi.decode(data, (bool))) return ERC1155_NO_APPROVAL_FOR_ALL;\\n    }\\n\\n    /**\\n     * @notice Check the validity of EOA maker order\\n     * @param digest Digest\\n     * @param targetSigner Expected signer address to confirm message validity\\n     * @param v V parameter (27 or 28)\\n     * @param r R parameter\\n     * @param s S parameter\\n     */\\n    function _validateEOA(\\n        bytes32 digest,\\n        address targetSigner,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (uint256 validationCode) {\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) return INVALID_S_PARAMETER_EOA;\\n\\n        if (v != 27 && v != 28) return INVALID_V_PARAMETER_EOA;\\n\\n        address signer = ecrecover(digest, v, r, s);\\n        if (signer == address(0)) return NULL_SIGNER_EOA;\\n        if (signer != targetSigner) return WRONG_SIGNER_EOA;\\n    }\\n\\n    /**\\n     * @notice Check the validity for EIP1271 maker order\\n     * @param digest Digest\\n     * @param targetSigner Expected signer address to confirm message validity\\n     * @param v V parameter (27 or 28)\\n     * @param r R parameter\\n     * @param s S parameter\\n     */\\n    function _validateERC1271(\\n        bytes32 digest,\\n        address targetSigner,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (uint256 validationCode) {\\n        (bool success, bytes memory data) = targetSigner.staticcall(\\n            abi.encodeWithSelector(\\n                IERC1271.isValidSignature.selector,\\n                digest,\\n                abi.encodePacked(r, s, v)\\n            )\\n        );\\n\\n        if (!success) return MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271;\\n        bytes4 magicValue = abi.decode(data, (bytes4));\\n\\n        if (magicValue != MAGIC_VALUE_EIP1271) return SIGNATURE_INVALID_EIP1271;\\n    }\\n}\\n\",\"keccak256\":\"0xb194068cbb86529184fd943940ecb08651a957786db77e88560d24bbcf43ace2\",\"license\":\"MIT\"},\"contracts/orderValidation/ValidationCodeConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nuint256 constant ORDER_EXPECTED_TO_BE_VALID = 0;\\nuint256 constant NONCE_EXECUTED_OR_CANCELLED = 101;\\nuint256 constant NONCE_BELOW_MIN_ORDER_NONCE = 102;\\nuint256 constant ORDER_AMOUNT_CANNOT_BE_ZERO = 201;\\nuint256 constant MAKER_SIGNER_IS_NULL_SIGNER = 301;\\nuint256 constant INVALID_S_PARAMETER_EOA = 302;\\nuint256 constant INVALID_V_PARAMETER_EOA = 303;\\nuint256 constant NULL_SIGNER_EOA = 304;\\nuint256 constant WRONG_SIGNER_EOA = 305;\\nuint256 constant SIGNATURE_INVALID_EIP1271 = 311;\\nuint256 constant MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271 = 312;\\nuint256 constant CURRENCY_NOT_WHITELISTED = 401;\\nuint256 constant STRATEGY_NOT_WHITELISTED = 402;\\nuint256 constant MIN_NET_RATIO_ABOVE_PROTOCOL_FEE = 501;\\nuint256 constant MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE = 502;\\nuint256 constant MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE = 503;\\nuint256 constant MISSING_ROYALTY_INFO_FUNCTION_ERC2981 = 504;\\nuint256 constant TOO_EARLY_TO_EXECUTE_ORDER = 601;\\nuint256 constant TOO_LATE_TO_EXECUTE_ORDER = 602;\\nuint256 constant NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION = 701;\\nuint256 constant CUSTOM_TRANSFER_MANAGER = 702;\\nuint256 constant ERC20_BALANCE_INFERIOR_TO_PRICE = 711;\\nuint256 constant ERC20_APPROVAL_INFERIOR_TO_PRICE = 712;\\nuint256 constant ERC721_TOKEN_ID_DOES_NOT_EXIST = 721;\\nuint256 constant ERC721_TOKEN_ID_NOT_IN_BALANCE = 722;\\nuint256 constant ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID = 723;\\nuint256 constant ERC1155_BALANCE_OF_DOES_NOT_EXIST = 731;\\nuint256 constant ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT = 732;\\nuint256 constant ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST = 733;\\nuint256 constant ERC1155_NO_APPROVAL_FOR_ALL = 734;\\n\",\"keccak256\":\"0x8b39eb4784db215698ee0ebcfc435310d505414b4804b374979daa3cb9e5cdcb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612cae80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635e14f68e1161010f578063b1357ddd116100a2578063bedb62f511610071578063bedb62f514610452578063c16f515614610460578063d547741f14610473578063fabf85fa1461048657600080fd5b8063b1357ddd146103f6578063b4299ada14610409578063bc6bc0cd1461041c578063bd97d43b1461042a57600080fd5b8063a217fddf116100de578063a217fddf146103ad578063aa7ed32a146103b5578063ad01f085146103c8578063b060dd86146103e857600080fd5b80635e14f68e1461035457806367bcbd6d14610367578063751e89ba1461037a57806391d148541461039a57600080fd5b80632f2ff15d1161018757806338928956116101565780633892895614610308578063483abb9f1461031b578063485cc9551461032e5780635a2f5e821461034157600080fd5b80632f2ff15d146102b057806333bf6156146102c55780633644e515146102ec57806336568abe146102f557600080fd5b80630b460728116101c35780630b460728146102465780630f747d741461025957806323e0998b14610284578063248a9ca31461028d57600080fd5b806301ffc9a7146101ea57806305a0e6f2146102125780630abefed614610233575b600080fd5b6101fd6101f8366004612737565b61048e565b60405190151581526020015b60405180910390f35b610225610220366004612771565b6104c5565b604051908152602001610209565b610225610241366004612771565b6104f8565b610225610254366004612771565b61050b565b609b5461026c906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b610225609a5481565b61022561029b3660046126e0565b60009081526065602052604090206001015490565b6102c36102be366004612712565b610621565b005b6102d3636cdb3d1360e11b81565b6040516001600160e01b03199091168152602001610209565b61022560995481565b6102c3610303366004612712565b61064b565b60985461026c906001600160a01b031681565b609c5461026c906001600160a01b031681565b6102c361033c3660046125f8565b6106ce565b61022561034f366004612771565b610d73565b609e5461026c906001600160a01b031681565b610225610375366004612771565b610ec1565b61038d610388366004612771565b611281565b6040516102099190612922565b6101fd6103a8366004612712565b6113ed565b610225600081565b609f5461026c906001600160a01b031681565b6103db6103d6366004612631565b611418565b60405161020991906128c0565b6102d363152a902d60e11b81565b60975461026c906001600160a01b031681565b610225610417366004612771565b6114c7565b6102d36380ac58cd60e01b81565b61043d610438366004612771565b611626565b60408051928352602083019190915201610209565b6102d3630b135d3f60e11b81565b609d5461026c906001600160a01b031681565b6102c3610481366004612712565b6116a4565b610225600881565b60006001600160e01b03198216637965db0b60e01b14806104bf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60004282610120013511156104dd5750610259919050565b4282610140013510156104f3575061025a919050565b919050565b600060a08201356104f3575060c9919050565b60008061051e6040840160208501612590565b6001600160a01b03161415610536575061012d919050565b600060995461054d8461054890612aa5565b6116c9565b60405161190160f01b6020820152602281019290925260428201526062016040516020818303038152906040528051906020012090506105a88360200160208101906105999190612590565b6001600160a01b03163b151590565b6105ea576105e3816105c06040860160208701612590565b6105d26101c087016101a088016127ad565b866101c00135876101e00135611770565b9392505050565b6105e3816105fe6040860160208701612590565b6106106101c087016101a088016127ad565b866101c00135876101e00135611872565b60008281526065602052604090206001015461063c816119af565b61064683836119bc565b505050565b6001600160a01b03811633146106c05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106ca8282611a42565b5050565b600054610100900460ff16158080156106ee5750600054600160ff909116105b806107085750303b158015610708575060005460ff166001145b61076b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b6000805460ff19166001179055801561078e576000805461ff0019166101001790555b610796611aa9565b61079e611aa9565b336001600160a01b038416156107b15750825b6107bc6000826119bc565b609f80546001600160a01b0319166001600160a01b03851690811790915560408051633644e51560e01b81529051633644e51591600480820192602092909190829003018186803b15801561081057600080fd5b505afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084891906126f9565b609981905550826001600160a01b0316635e14f68e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf91906125ad565b6001600160a01b031663b1357ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f91906125ad565b609760006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b0316635e14f68e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561098e57600080fd5b505afa1580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c691906125ad565b6001600160a01b031663389289566040518163ffffffff1660e01b815260040160206040518083038186803b1580156109fe57600080fd5b505afa158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3691906125ad565b609860006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b0316630f747d746040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd91906125ad565b609b60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b031663483abb9f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906125ad565b609c60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b0316635e14f68e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb91906125ad565b609e60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000836001600160a01b03166387e4401f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5c57600080fd5b505afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9491906125ad565b9050806001600160a01b031663c16f51566040518163ffffffff1660e01b815260040160206040518083038186803b158015610ccf57600080fd5b505afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0791906125ad565b609d80546001600160a01b0319166001600160a01b039290921691909117905550508015610646576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b609b546000906001600160a01b03166343b938c5610d98610100850160e08601612590565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610dd757600080fd5b505afa158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f91906126c3565b610e1c5750610191919050565b609c546001600160a01b031663999ba27c610e3d60e0850160c08601612590565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610e7c57600080fd5b505afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb491906126c3565b6104f35750610192919050565b6000610ed060208301836126a6565b610edc57506000919050565b6000610ef16060840135610160850135612a6f565b905060608301356000612710610f0d60e0870160c08801612590565b6001600160a01b0316639dd1cda66040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4557600080fd5b505afa158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d91906126f9565b610f8b906060880135612a6f565b610f959190612a4d565b9050610fa18183612a8e565b915082610fb083612710612a6f565b1015610fc257506101f5949350505050565b609d5460009081906001600160a01b0316632782d6c7610fe860608a0160408b01612590565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260608a01356024820152604401604080518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106891906125ca565b90925090506001600160a01b0382161580159061108457508015155b156110bb576110938185612a8e565b9350846110a285612710612a6f565b10156110b657506101f69695505050505050565b611277565b6110cb6060880160408901612590565b6040516301ffc9a760e01b815263152a902d60e11b60048201526001600160a01b0391909116906301ffc9a79060240160206040518083038186803b15801561111357600080fd5b505afa158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b91906126c3565b156112775760008061116360608a0160408b01612590565b6040805160808c0135602482015260608c013560448083019190915282518083039091018152606490910182526020810180516001600160e01b031663152a902d60e11b17905290516001600160a01b0392909216916111c3919061282f565b600060405180830381855afa9150503d80600081146111fe576040519150601f19603f3d011682016040523d82523d6000602084013e611203565b606091505b50915091508161121d57506101f898975050505050505050565b8080602001905181019061123191906125ca565b90945092506001600160a01b038416156112745761124f8387612a8e565b95508661125e87612710612a6f565b101561127457506101f798975050505050505050565b50505b5050505050919050565b604080516008808252610120820190925260609160208201610100803683370190505090506112af826114c7565b816000815181106112c2576112c2612c13565b6020026020010181815250506112d7826104f8565b816001815181106112ea576112ea612c13565b6020026020010181815250506112ff8261050b565b8160028151811061131257611312612c13565b60200260200101818152505061132782610d73565b8160038151811061133a5761133a612c13565b60200260200101818152505061134f82610ec1565b8160048151811061136257611362612c13565b602002602001018181525050611377826104c5565b8160058151811061138a5761138a612c13565b6020026020010181815250506000806113a284611626565b9150915081836006815181106113ba576113ba612c13565b60200260200101818152505080836007815181106113da576113da612c13565b6020026020010181815250505050919050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60608167ffffffffffffffff81111561143357611433612c29565b60405190808252806020026020018201604052801561146657816020015b60608152602001906001900390816114515790505b50905060005b828110156114c05761149b84848381811061148957611489612c13565b905060200281019061038891906129f4565b8282815181106114ad576114ad612c13565b602090810291909101015260010161146c565b5092915050565b609f546000906001600160a01b03166331e27e276114eb6040850160208601612590565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152610100850135602482015260440160206040518083038186803b15801561153557600080fd5b505afa158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156d91906126c3565b1561157a57506065919050565b609f546001600160a01b0316634266581e61159b6040850160208601612590565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161291906126f9565b82610100013510156104f357506066919050565b60008061163660208401846126a6565b156116765761166d61164e6060850160408601612590565b61165e6040860160208701612590565b85608001358660a00135611b16565b91509150915091565b61166d61168a610100850160e08601612590565b61169a6040860160208701612590565b8560600135611d47565b6000828152606560205260409020600101546116bf816119af565b6106468383611a42565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01516101608e01516101808f01518051908e01209a5160009e6117539e7f40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a850289e919d919c9b9a999897969594939201612935565b604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156117a3575061012e611869565b8360ff16601b141580156117bb57508360ff16601c14155b156117c9575061012f611869565b6040805160008082526020820180845289905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa15801561181d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661184357610130915050611869565b856001600160a01b0316816001600160a01b03161461186757610131915050611869565b505b95945050505050565b604080516020810184905280820183905260f885901b6001600160f81b03191660608201528151604181830301815260618201909252600091829182916001600160a01b03891691630b135d3f60e11b916118d2918c91906085016129c8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611910919061282f565b600060405180830381855afa9150503d806000811461194b576040519150601f19603f3d011682016040523d82523d6000602084013e611950565b606091505b5091509150816119665761013892505050611869565b60008180602001905181019061197c9190612754565b90506001600160e01b03198116630b135d3f60e11b146119a3576101379350505050611869565b50505095945050505050565b6119b98133611e78565b50565b6119c682826113ed565b6106ca5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119fe3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611a4c82826113ed565b156106ca5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff16611b145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106b7565b565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152600090819081906001600160a01b038816906301ffc9a79060240160206040518083038186803b158015611b6357600080fd5b505afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b91906126c3565b15611bb75750506097546102d1906001600160a01b0316611cd1565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a79060240160206040518083038186803b158015611bfd57600080fd5b505afa158015611c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3591906126c3565b15611c51575050609854610483906001600160a01b0316611cd1565b609e54604051634216a75360e01b81526001600160a01b03898116600483015290911690634216a7539060240160206040518083038186803b158015611c9657600080fd5b505afa158015611caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cce91906125ad565b90505b6001600160a01b038116611cea576102bd925050611d3e565b6097546001600160a01b0382811691161415611d1457611d0c87878388611ed1565b925050611d3e565b6098546001600160a01b0382811691161415611d3757611d0c8787838888612173565b6102be9250505b94509492505050565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918491908716906370a082319060240160206040518083038186803b158015611d9057600080fd5b505afa158015611da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc891906126f9565b1015611ddb57506102c790506014611e70565b609f54604051636eb1769f60e11b81526001600160a01b0386811660048301529182166024820152849187169063dd62ed3e9060440160206040518083038186803b158015611e2957600080fd5b505afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6191906126f9565b1015611e7057506102c8905060145b935093915050565b611e8282826113ed565b6106ca57611e8f8161232e565b611e9a836020612340565b604051602001611eab92919061284b565b60408051601f198184030181529082905262461bcd60e51b82526106b7916004016129e1565b6000806000866001600160a01b0316636352211e60e01b85604051602401611efb91815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f39919061282f565b600060405180830381855afa9150503d8060008114611f74576040519150601f19603f3d011682016040523d82523d6000602084013e611f79565b606091505b509150915081611f8f576102d19250505061216b565b856001600160a01b031681806020019051810190611fad91906125ad565b6001600160a01b031614611fc7576102d29250505061216b565b604080516001600160a01b03888116602483015287811660448084019190915283518084039091018152606490920183526020820180516001600160e01b031663e985e9c560e01b179052915191891691612022919061282f565b600060405180830381855afa9150503d806000811461205d576040519150601f19603f3d011682016040523d82523d6000602084013e612062565b606091505b50909250905060008215612087578180602001905181019061208491906126c3565b90505b806121675760408051602480820188905282518083039091018152604490910182526020810180516001600160e01b031663020604bf60e21b17905290516001600160a01b038a16916120d99161282f565b600060405180830381855afa9150503d8060008114612114576040519150601f19603f3d011682016040523d82523d6000602084013e612119565b606091505b5090935091506000831561213e578280602001905181019061213b91906125ad565b90505b866001600160a01b0316816001600160a01b031614612165576102d394505050505061216b565b505b5050505b949350505050565b604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b0316627eeac760e11b179052915160009283928392918a16916121d0919061282f565b600060405180830381855afa9150503d806000811461220b576040519150601f19603f3d011682016040523d82523d6000602084013e612210565b606091505b509150915081612226576102db92505050611869565b838180602001905181019061223b91906126f9565b101561224d576102dc92505050611869565b604080516001600160a01b03898116602483015288811660448084019190915283518084039091018152606490920183526020820180516001600160e01b031663e985e9c560e01b1790529151918a16916122a8919061282f565b600060405180830381855afa9150503d80600081146122e3576040519150601f19603f3d011682016040523d82523d6000602084013e6122e8565b606091505b509092509050816122ff576102dd92505050611869565b8080602001905181019061231391906126c3565b612323576102de92505050611869565b505095945050505050565b60606104bf6001600160a01b03831660145b6060600061234f836002612a6f565b61235a906002612a35565b67ffffffffffffffff81111561237257612372612c29565b6040519080825280601f01601f19166020018201604052801561239c576020820181803683370190505b509050600360fc1b816000815181106123b7576123b7612c13565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106123e6576123e6612c13565b60200101906001600160f81b031916908160001a905350600061240a846002612a6f565b612415906001612a35565b90505b600181111561248d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061244957612449612c13565b1a60f81b82828151811061245f5761245f612c13565b60200101906001600160f81b031916908160001a90535060049490941c9361248681612be6565b9050612418565b5083156105e35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b7565b80356104f381612c3f565b80356104f381612c54565b600082601f83011261250357600080fd5b813567ffffffffffffffff8082111561251e5761251e612c29565b604051601f8301601f19908116603f0116810190828211818310171561254657612546612c29565b8160405283815286602085880101111561255f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff811681146104f357600080fd5b6000602082840312156125a257600080fd5b81356105e381612c3f565b6000602082840312156125bf57600080fd5b81516105e381612c3f565b600080604083850312156125dd57600080fd5b82516125e881612c3f565b6020939093015192949293505050565b6000806040838503121561260b57600080fd5b823561261681612c3f565b9150602083013561262681612c3f565b809150509250929050565b6000806020838503121561264457600080fd5b823567ffffffffffffffff8082111561265c57600080fd5b818501915085601f83011261267057600080fd5b81358181111561267f57600080fd5b8660208260051b850101111561269457600080fd5b60209290920196919550909350505050565b6000602082840312156126b857600080fd5b81356105e381612c54565b6000602082840312156126d557600080fd5b81516105e381612c54565b6000602082840312156126f257600080fd5b5035919050565b60006020828403121561270b57600080fd5b5051919050565b6000806040838503121561272557600080fd5b82359150602083013561262681612c3f565b60006020828403121561274957600080fd5b81356105e381612c62565b60006020828403121561276657600080fd5b81516105e381612c62565b60006020828403121561278357600080fd5b813567ffffffffffffffff81111561279a57600080fd5b820161020081850312156105e357600080fd5b6000602082840312156127bf57600080fd5b6105e38261257f565b600081518084526020808501945080840160005b838110156127f8578151875295820195908201906001016127dc565b509495945050505050565b6000815180845261281b816020860160208601612bb6565b601f01601f19169290920160200192915050565b60008251612841818460208701612bb6565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612883816017850160208801612bb6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128b4816028840160208801612bb6565b01602801949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561291557603f198886030184526129038583516127c8565b945092850192908501906001016128e7565b5092979650505050505050565b6020815260006105e360208301846127c8565b8e81528d151560208201526001600160a01b038d811660408301528c1660608201526101c081018b60808301528a60a08301528960c083015261298360e083018a6001600160a01b03169052565b6001600160a01b0388166101008301526101208201969096526101408101949094526101608401929092526101808301526101a0909101529998505050505050505050565b82815260406020820152600061216b6040830184612803565b6020815260006105e36020830184612803565b600082356101fe1983360301811261284157600080fd5b604051610200810167ffffffffffffffff81118282101715612a2f57612a2f612c29565b60405290565b60008219821115612a4857612a48612bfd565b500190565b600082612a6a57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612a8957612a89612bfd565b500290565b600082821015612aa057612aa0612bfd565b500390565b60006102008236031215612ab857600080fd5b612ac0612a0b565b612ac9836124e7565b8152612ad7602084016124dc565b6020820152612ae8604084016124dc565b6040820152606083013560608201526080830135608082015260a083013560a0820152612b1760c084016124dc565b60c0820152612b2860e084016124dc565b60e082015261010083810135908201526101208084013590820152610140808401359082015261016080840135908201526101808084013567ffffffffffffffff811115612b7557600080fd5b612b81368287016124f2565b8284015250506101a0612b9581850161257f565b908201526101c083810135908201526101e092830135928101929092525090565b60005b83811015612bd1578181015183820152602001612bb9565b83811115612be0576000848401525b50505050565b600081612bf557612bf5612bfd565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146119b957600080fd5b80151581146119b957600080fd5b6001600160e01b0319811681146119b957600080fdfea2646970667358221220cba661ceb2f4ef64a1172b7af9353efc21e67262076b8c7704a43af03986aa7864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80635e14f68e1161010f578063b1357ddd116100a2578063bedb62f511610071578063bedb62f514610452578063c16f515614610460578063d547741f14610473578063fabf85fa1461048657600080fd5b8063b1357ddd146103f6578063b4299ada14610409578063bc6bc0cd1461041c578063bd97d43b1461042a57600080fd5b8063a217fddf116100de578063a217fddf146103ad578063aa7ed32a146103b5578063ad01f085146103c8578063b060dd86146103e857600080fd5b80635e14f68e1461035457806367bcbd6d14610367578063751e89ba1461037a57806391d148541461039a57600080fd5b80632f2ff15d1161018757806338928956116101565780633892895614610308578063483abb9f1461031b578063485cc9551461032e5780635a2f5e821461034157600080fd5b80632f2ff15d146102b057806333bf6156146102c55780633644e515146102ec57806336568abe146102f557600080fd5b80630b460728116101c35780630b460728146102465780630f747d741461025957806323e0998b14610284578063248a9ca31461028d57600080fd5b806301ffc9a7146101ea57806305a0e6f2146102125780630abefed614610233575b600080fd5b6101fd6101f8366004612737565b61048e565b60405190151581526020015b60405180910390f35b610225610220366004612771565b6104c5565b604051908152602001610209565b610225610241366004612771565b6104f8565b610225610254366004612771565b61050b565b609b5461026c906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b610225609a5481565b61022561029b3660046126e0565b60009081526065602052604090206001015490565b6102c36102be366004612712565b610621565b005b6102d3636cdb3d1360e11b81565b6040516001600160e01b03199091168152602001610209565b61022560995481565b6102c3610303366004612712565b61064b565b60985461026c906001600160a01b031681565b609c5461026c906001600160a01b031681565b6102c361033c3660046125f8565b6106ce565b61022561034f366004612771565b610d73565b609e5461026c906001600160a01b031681565b610225610375366004612771565b610ec1565b61038d610388366004612771565b611281565b6040516102099190612922565b6101fd6103a8366004612712565b6113ed565b610225600081565b609f5461026c906001600160a01b031681565b6103db6103d6366004612631565b611418565b60405161020991906128c0565b6102d363152a902d60e11b81565b60975461026c906001600160a01b031681565b610225610417366004612771565b6114c7565b6102d36380ac58cd60e01b81565b61043d610438366004612771565b611626565b60408051928352602083019190915201610209565b6102d3630b135d3f60e11b81565b609d5461026c906001600160a01b031681565b6102c3610481366004612712565b6116a4565b610225600881565b60006001600160e01b03198216637965db0b60e01b14806104bf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60004282610120013511156104dd5750610259919050565b4282610140013510156104f3575061025a919050565b919050565b600060a08201356104f3575060c9919050565b60008061051e6040840160208501612590565b6001600160a01b03161415610536575061012d919050565b600060995461054d8461054890612aa5565b6116c9565b60405161190160f01b6020820152602281019290925260428201526062016040516020818303038152906040528051906020012090506105a88360200160208101906105999190612590565b6001600160a01b03163b151590565b6105ea576105e3816105c06040860160208701612590565b6105d26101c087016101a088016127ad565b866101c00135876101e00135611770565b9392505050565b6105e3816105fe6040860160208701612590565b6106106101c087016101a088016127ad565b866101c00135876101e00135611872565b60008281526065602052604090206001015461063c816119af565b61064683836119bc565b505050565b6001600160a01b03811633146106c05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106ca8282611a42565b5050565b600054610100900460ff16158080156106ee5750600054600160ff909116105b806107085750303b158015610708575060005460ff166001145b61076b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b6000805460ff19166001179055801561078e576000805461ff0019166101001790555b610796611aa9565b61079e611aa9565b336001600160a01b038416156107b15750825b6107bc6000826119bc565b609f80546001600160a01b0319166001600160a01b03851690811790915560408051633644e51560e01b81529051633644e51591600480820192602092909190829003018186803b15801561081057600080fd5b505afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084891906126f9565b609981905550826001600160a01b0316635e14f68e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf91906125ad565b6001600160a01b031663b1357ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f91906125ad565b609760006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b0316635e14f68e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561098e57600080fd5b505afa1580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c691906125ad565b6001600160a01b031663389289566040518163ffffffff1660e01b815260040160206040518083038186803b1580156109fe57600080fd5b505afa158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3691906125ad565b609860006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b0316630f747d746040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd91906125ad565b609b60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b031663483abb9f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906125ad565b609c60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b0316635e14f68e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb91906125ad565b609e60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000836001600160a01b03166387e4401f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5c57600080fd5b505afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9491906125ad565b9050806001600160a01b031663c16f51566040518163ffffffff1660e01b815260040160206040518083038186803b158015610ccf57600080fd5b505afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0791906125ad565b609d80546001600160a01b0319166001600160a01b039290921691909117905550508015610646576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b609b546000906001600160a01b03166343b938c5610d98610100850160e08601612590565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610dd757600080fd5b505afa158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f91906126c3565b610e1c5750610191919050565b609c546001600160a01b031663999ba27c610e3d60e0850160c08601612590565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610e7c57600080fd5b505afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb491906126c3565b6104f35750610192919050565b6000610ed060208301836126a6565b610edc57506000919050565b6000610ef16060840135610160850135612a6f565b905060608301356000612710610f0d60e0870160c08801612590565b6001600160a01b0316639dd1cda66040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4557600080fd5b505afa158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d91906126f9565b610f8b906060880135612a6f565b610f959190612a4d565b9050610fa18183612a8e565b915082610fb083612710612a6f565b1015610fc257506101f5949350505050565b609d5460009081906001600160a01b0316632782d6c7610fe860608a0160408b01612590565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260608a01356024820152604401604080518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106891906125ca565b90925090506001600160a01b0382161580159061108457508015155b156110bb576110938185612a8e565b9350846110a285612710612a6f565b10156110b657506101f69695505050505050565b611277565b6110cb6060880160408901612590565b6040516301ffc9a760e01b815263152a902d60e11b60048201526001600160a01b0391909116906301ffc9a79060240160206040518083038186803b15801561111357600080fd5b505afa158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b91906126c3565b156112775760008061116360608a0160408b01612590565b6040805160808c0135602482015260608c013560448083019190915282518083039091018152606490910182526020810180516001600160e01b031663152a902d60e11b17905290516001600160a01b0392909216916111c3919061282f565b600060405180830381855afa9150503d80600081146111fe576040519150601f19603f3d011682016040523d82523d6000602084013e611203565b606091505b50915091508161121d57506101f898975050505050505050565b8080602001905181019061123191906125ca565b90945092506001600160a01b038416156112745761124f8387612a8e565b95508661125e87612710612a6f565b101561127457506101f798975050505050505050565b50505b5050505050919050565b604080516008808252610120820190925260609160208201610100803683370190505090506112af826114c7565b816000815181106112c2576112c2612c13565b6020026020010181815250506112d7826104f8565b816001815181106112ea576112ea612c13565b6020026020010181815250506112ff8261050b565b8160028151811061131257611312612c13565b60200260200101818152505061132782610d73565b8160038151811061133a5761133a612c13565b60200260200101818152505061134f82610ec1565b8160048151811061136257611362612c13565b602002602001018181525050611377826104c5565b8160058151811061138a5761138a612c13565b6020026020010181815250506000806113a284611626565b9150915081836006815181106113ba576113ba612c13565b60200260200101818152505080836007815181106113da576113da612c13565b6020026020010181815250505050919050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60608167ffffffffffffffff81111561143357611433612c29565b60405190808252806020026020018201604052801561146657816020015b60608152602001906001900390816114515790505b50905060005b828110156114c05761149b84848381811061148957611489612c13565b905060200281019061038891906129f4565b8282815181106114ad576114ad612c13565b602090810291909101015260010161146c565b5092915050565b609f546000906001600160a01b03166331e27e276114eb6040850160208601612590565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152610100850135602482015260440160206040518083038186803b15801561153557600080fd5b505afa158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156d91906126c3565b1561157a57506065919050565b609f546001600160a01b0316634266581e61159b6040850160208601612590565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161291906126f9565b82610100013510156104f357506066919050565b60008061163660208401846126a6565b156116765761166d61164e6060850160408601612590565b61165e6040860160208701612590565b85608001358660a00135611b16565b91509150915091565b61166d61168a610100850160e08601612590565b61169a6040860160208701612590565b8560600135611d47565b6000828152606560205260409020600101546116bf816119af565b6106468383611a42565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01516101608e01516101808f01518051908e01209a5160009e6117539e7f40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a850289e919d919c9b9a999897969594939201612935565b604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156117a3575061012e611869565b8360ff16601b141580156117bb57508360ff16601c14155b156117c9575061012f611869565b6040805160008082526020820180845289905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa15801561181d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661184357610130915050611869565b856001600160a01b0316816001600160a01b03161461186757610131915050611869565b505b95945050505050565b604080516020810184905280820183905260f885901b6001600160f81b03191660608201528151604181830301815260618201909252600091829182916001600160a01b03891691630b135d3f60e11b916118d2918c91906085016129c8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611910919061282f565b600060405180830381855afa9150503d806000811461194b576040519150601f19603f3d011682016040523d82523d6000602084013e611950565b606091505b5091509150816119665761013892505050611869565b60008180602001905181019061197c9190612754565b90506001600160e01b03198116630b135d3f60e11b146119a3576101379350505050611869565b50505095945050505050565b6119b98133611e78565b50565b6119c682826113ed565b6106ca5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119fe3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611a4c82826113ed565b156106ca5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff16611b145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106b7565b565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152600090819081906001600160a01b038816906301ffc9a79060240160206040518083038186803b158015611b6357600080fd5b505afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b91906126c3565b15611bb75750506097546102d1906001600160a01b0316611cd1565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a79060240160206040518083038186803b158015611bfd57600080fd5b505afa158015611c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3591906126c3565b15611c51575050609854610483906001600160a01b0316611cd1565b609e54604051634216a75360e01b81526001600160a01b03898116600483015290911690634216a7539060240160206040518083038186803b158015611c9657600080fd5b505afa158015611caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cce91906125ad565b90505b6001600160a01b038116611cea576102bd925050611d3e565b6097546001600160a01b0382811691161415611d1457611d0c87878388611ed1565b925050611d3e565b6098546001600160a01b0382811691161415611d3757611d0c8787838888612173565b6102be9250505b94509492505050565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918491908716906370a082319060240160206040518083038186803b158015611d9057600080fd5b505afa158015611da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc891906126f9565b1015611ddb57506102c790506014611e70565b609f54604051636eb1769f60e11b81526001600160a01b0386811660048301529182166024820152849187169063dd62ed3e9060440160206040518083038186803b158015611e2957600080fd5b505afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6191906126f9565b1015611e7057506102c8905060145b935093915050565b611e8282826113ed565b6106ca57611e8f8161232e565b611e9a836020612340565b604051602001611eab92919061284b565b60408051601f198184030181529082905262461bcd60e51b82526106b7916004016129e1565b6000806000866001600160a01b0316636352211e60e01b85604051602401611efb91815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f39919061282f565b600060405180830381855afa9150503d8060008114611f74576040519150601f19603f3d011682016040523d82523d6000602084013e611f79565b606091505b509150915081611f8f576102d19250505061216b565b856001600160a01b031681806020019051810190611fad91906125ad565b6001600160a01b031614611fc7576102d29250505061216b565b604080516001600160a01b03888116602483015287811660448084019190915283518084039091018152606490920183526020820180516001600160e01b031663e985e9c560e01b179052915191891691612022919061282f565b600060405180830381855afa9150503d806000811461205d576040519150601f19603f3d011682016040523d82523d6000602084013e612062565b606091505b50909250905060008215612087578180602001905181019061208491906126c3565b90505b806121675760408051602480820188905282518083039091018152604490910182526020810180516001600160e01b031663020604bf60e21b17905290516001600160a01b038a16916120d99161282f565b600060405180830381855afa9150503d8060008114612114576040519150601f19603f3d011682016040523d82523d6000602084013e612119565b606091505b5090935091506000831561213e578280602001905181019061213b91906125ad565b90505b866001600160a01b0316816001600160a01b031614612165576102d394505050505061216b565b505b5050505b949350505050565b604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b0316627eeac760e11b179052915160009283928392918a16916121d0919061282f565b600060405180830381855afa9150503d806000811461220b576040519150601f19603f3d011682016040523d82523d6000602084013e612210565b606091505b509150915081612226576102db92505050611869565b838180602001905181019061223b91906126f9565b101561224d576102dc92505050611869565b604080516001600160a01b03898116602483015288811660448084019190915283518084039091018152606490920183526020820180516001600160e01b031663e985e9c560e01b1790529151918a16916122a8919061282f565b600060405180830381855afa9150503d80600081146122e3576040519150601f19603f3d011682016040523d82523d6000602084013e6122e8565b606091505b509092509050816122ff576102dd92505050611869565b8080602001905181019061231391906126c3565b612323576102de92505050611869565b505095945050505050565b60606104bf6001600160a01b03831660145b6060600061234f836002612a6f565b61235a906002612a35565b67ffffffffffffffff81111561237257612372612c29565b6040519080825280601f01601f19166020018201604052801561239c576020820181803683370190505b509050600360fc1b816000815181106123b7576123b7612c13565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106123e6576123e6612c13565b60200101906001600160f81b031916908160001a905350600061240a846002612a6f565b612415906001612a35565b90505b600181111561248d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061244957612449612c13565b1a60f81b82828151811061245f5761245f612c13565b60200101906001600160f81b031916908160001a90535060049490941c9361248681612be6565b9050612418565b5083156105e35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b7565b80356104f381612c3f565b80356104f381612c54565b600082601f83011261250357600080fd5b813567ffffffffffffffff8082111561251e5761251e612c29565b604051601f8301601f19908116603f0116810190828211818310171561254657612546612c29565b8160405283815286602085880101111561255f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff811681146104f357600080fd5b6000602082840312156125a257600080fd5b81356105e381612c3f565b6000602082840312156125bf57600080fd5b81516105e381612c3f565b600080604083850312156125dd57600080fd5b82516125e881612c3f565b6020939093015192949293505050565b6000806040838503121561260b57600080fd5b823561261681612c3f565b9150602083013561262681612c3f565b809150509250929050565b6000806020838503121561264457600080fd5b823567ffffffffffffffff8082111561265c57600080fd5b818501915085601f83011261267057600080fd5b81358181111561267f57600080fd5b8660208260051b850101111561269457600080fd5b60209290920196919550909350505050565b6000602082840312156126b857600080fd5b81356105e381612c54565b6000602082840312156126d557600080fd5b81516105e381612c54565b6000602082840312156126f257600080fd5b5035919050565b60006020828403121561270b57600080fd5b5051919050565b6000806040838503121561272557600080fd5b82359150602083013561262681612c3f565b60006020828403121561274957600080fd5b81356105e381612c62565b60006020828403121561276657600080fd5b81516105e381612c62565b60006020828403121561278357600080fd5b813567ffffffffffffffff81111561279a57600080fd5b820161020081850312156105e357600080fd5b6000602082840312156127bf57600080fd5b6105e38261257f565b600081518084526020808501945080840160005b838110156127f8578151875295820195908201906001016127dc565b509495945050505050565b6000815180845261281b816020860160208601612bb6565b601f01601f19169290920160200192915050565b60008251612841818460208701612bb6565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612883816017850160208801612bb6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128b4816028840160208801612bb6565b01602801949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561291557603f198886030184526129038583516127c8565b945092850192908501906001016128e7565b5092979650505050505050565b6020815260006105e360208301846127c8565b8e81528d151560208201526001600160a01b038d811660408301528c1660608201526101c081018b60808301528a60a08301528960c083015261298360e083018a6001600160a01b03169052565b6001600160a01b0388166101008301526101208201969096526101408101949094526101608401929092526101808301526101a0909101529998505050505050505050565b82815260406020820152600061216b6040830184612803565b6020815260006105e36020830184612803565b600082356101fe1983360301811261284157600080fd5b604051610200810167ffffffffffffffff81118282101715612a2f57612a2f612c29565b60405290565b60008219821115612a4857612a48612bfd565b500190565b600082612a6a57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612a8957612a89612bfd565b500290565b600082821015612aa057612aa0612bfd565b500390565b60006102008236031215612ab857600080fd5b612ac0612a0b565b612ac9836124e7565b8152612ad7602084016124dc565b6020820152612ae8604084016124dc565b6040820152606083013560608201526080830135608082015260a083013560a0820152612b1760c084016124dc565b60c0820152612b2860e084016124dc565b60e082015261010083810135908201526101208084013590820152610140808401359082015261016080840135908201526101808084013567ffffffffffffffff811115612b7557600080fd5b612b81368287016124f2565b8284015250506101a0612b9581850161257f565b908201526101c083810135908201526101e092830135928101929092525090565b60005b83811015612bd1578181015183820152602001612bb9565b83811115612be0576000848401525b50505050565b600081612bf557612bf5612bfd565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146119b957600080fd5b80151581146119b957600080fd5b6001600160e01b0319811681146119b957600080fdfea2646970667358221220cba661ceb2f4ef64a1172b7af9353efc21e67262076b8c7704a43af03986aa7864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkMultipleOrderValidities((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32)[])": {
        "params": {
          "makerOrders": "Array of maker order structs"
        },
        "returns": {
          "validationCodes": "Array of validation code arrays for the maker orders"
        }
      },
      "checkOrderValidity((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerOrder": "Maker order struct"
        },
        "returns": {
          "validationCodes": "Array of validations code for each group"
        }
      },
      "checkValidityAmounts((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerOrder": "Maker order struct"
        },
        "returns": {
          "validationCode": "Validation code"
        }
      },
      "checkValidityApprovalsAndBalances((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerOrder": "Maker order struct"
        },
        "returns": {
          "validationCode": "Validation code"
        }
      },
      "checkValidityMinPercentageToAsk((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerOrder": "Maker order struct"
        },
        "returns": {
          "validationCode": "Validation code"
        }
      },
      "checkValidityNonces((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerOrder": "Maker order struct"
        },
        "returns": {
          "validationCode": "Validation code"
        }
      },
      "checkValiditySignature((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerOrder": "Maker order struct"
        },
        "returns": {
          "validationCode": "Validation code"
        }
      },
      "checkValidityTimestamps((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerOrder": "Maker order struct"
        },
        "returns": {
          "validationCode": "Validation code"
        }
      },
      "checkValidityWhitelists((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerOrder": "Maker order struct"
        },
        "returns": {
          "validationCode": "Validation code"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address)": {
        "params": {
          "_dareMarket": "address of the DareMarket"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "OrderValidator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkMultipleOrderValidities((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32)[])": {
        "notice": "Check the validities for an array of maker orders"
      },
      "checkOrderValidity((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check the validity of a maker order"
      },
      "checkValidityAmounts((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check the validity of amounts"
      },
      "checkValidityApprovalsAndBalances((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check the validity of approvals and balances"
      },
      "checkValidityMinPercentageToAsk((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check the validity of min percentage to ask"
      },
      "checkValidityNonces((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check the validity for user nonces"
      },
      "checkValiditySignature((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check the validity of a signature"
      },
      "checkValidityTimestamps((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check the validity of order timestamps"
      },
      "checkValidityWhitelists((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check the validity for currency/strategy whitelists"
      },
      "initialize(address,address)": {
        "notice": "Initialize"
      }
    },
    "notice": "This contract is used to check the validity of a maker order in the Protocol (v1).         It performs checks for:         1. Nonce-related issues (e.g., nonce executed or cancelled)         2. Amount-related issues (e.g. order amount being 0)         3. Signature-related issues         4. Whitelist-related issues (i.e., currency or strategy not whitelisted)         5. Fee-related issues (e.g., minPercentageToAsk too high due to changes in royalties)         6. Timestamp-related issues (e.g., order expired)         7. Transfer-related issues for ERC20/ERC721/ERC1155 (approvals and balances)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 975,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1194,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12983,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "TRANSFER_MANAGER_ERC721",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 12985,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "TRANSFER_MANAGER_ERC1155",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 12987,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "153",
        "type": "t_bytes32"
      },
      {
        "astId": 12989,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "STANDARD_ROYALTY_FEE",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 12992,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "currencyManager",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(ICurrencyManager)12418"
      },
      {
        "astId": 12995,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "executionManager",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IExecutionManager)12487"
      },
      {
        "astId": 12998,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "royaltyFeeRegistry",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IRoyaltyFeeRegistry)12602"
      },
      {
        "astId": 13001,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "transferSelectorNFT",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(ITransferSelectorNFTExtended)12922"
      },
      {
        "astId": 13004,
        "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
        "label": "dareMarket",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(DareMarket)10242"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(DareMarket)10242": {
        "encoding": "inplace",
        "label": "contract DareMarket",
        "numberOfBytes": "20"
      },
      "t_contract(ICurrencyManager)12418": {
        "encoding": "inplace",
        "label": "contract ICurrencyManager",
        "numberOfBytes": "20"
      },
      "t_contract(IExecutionManager)12487": {
        "encoding": "inplace",
        "label": "contract IExecutionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyFeeRegistry)12602": {
        "encoding": "inplace",
        "label": "contract IRoyaltyFeeRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ITransferSelectorNFTExtended)12922": {
        "encoding": "inplace",
        "label": "contract ITransferSelectorNFTExtended",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/orderValidation/OrderValidator.sol:OrderValidator",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}